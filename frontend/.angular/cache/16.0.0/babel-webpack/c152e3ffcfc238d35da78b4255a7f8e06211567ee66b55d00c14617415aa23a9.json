{"ast":null,"code":"//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                //\n//  ███████╗ █████╗ ██╗██╗     ███████╗   ██╗ ██████╗         ██╗███████╗         //\n//  ██╔════╝██╔══██╗██║██║     ██╔════╝   ██║██╔═══██╗        ██║██╔════╝         //\n//  ███████╗███████║██║██║     ███████╗   ██║██║   ██║        ██║███████╗         //\n//  ╚════██║██╔══██║██║██║     ╚════██║   ██║██║   ██║   ██   ██║╚════██║         //\n//  ███████║██║  ██║██║███████╗███████║██╗██║╚██████╔╝██╗╚█████╔╝███████║         //\n//  ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝╚═╝╚═╝ ╚═════╝ ╚═╝ ╚════╝ ╚══════╝         //\n//                                                                                //\n//   ╦╔═╗╦  ╦╔═╗╔═╗╔═╗╦═╗╦╔═╗╔╦╗  ╔═╗╦  ╦╔═╗╔╗╔╔╦╗  ╔═╗╔╦╗╦╔═                     //\n//   ║╠═╣╚╗╔╝╠═╣╚═╗║  ╠╦╝║╠═╝ ║   ║  ║  ║║╣ ║║║ ║   ╚═╗ ║║╠╩╗                     //\n//  ╚╝╩ ╩ ╚╝ ╩ ╩╚═╝╚═╝╩╚═╩╩   ╩   ╚═╝╩═╝╩╚═╝╝╚╝ ╩   ╚═╝═╩╝╩ ╩                     //\n//  ┌─┐┌─┐┬─┐  ┌┐┌┌─┐┌┬┐┌─┐  ┬┌─┐  ┌─┐┌┐┌┌┬┐  ┌┬┐┬ ┬┌─┐  ┌┐ ┬─┐┌─┐┬ ┬┌─┐┌─┐┬─┐    //\n//  ├┤ │ │├┬┘  ││││ │ ││├┤   │└─┐  ├─┤│││ ││   │ ├─┤├┤   ├┴┐├┬┘│ ││││└─┐├┤ ├┬┘    //\n//  └  └─┘┴└─  ┘└┘└─┘─┴┘└─┘o└┘└─┘  ┴ ┴┘└┘─┴┘   ┴ ┴ ┴└─┘  └─┘┴└─└─┘└┴┘└─┘└─┘┴└─    //\n//                                                                                //\n//////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * sails.io.js\n * ------------------------------------------------------------------------\n * JavaScript Client (SDK) for communicating with Sails.\n *\n * Note that this script is completely optional, but it is handy if you're\n * using WebSockets from the browser to talk to your Sails server.\n *\n * For tips and documentation, visit:\n * http://sailsjs.com/documentation/reference/web-sockets/socket-client\n * ------------------------------------------------------------------------\n *\n * This file allows you to send and receive socket.io messages to & from Sails\n * by simulating a REST client interface on top of socket.io. It models its API\n * after the $.ajax pattern from jQuery you might already be familiar with.\n *\n * So if you're switching from using AJAX to sockets, instead of:\n *    `$.post( url, [data], [cb] )`\n *\n * You would use:\n *    `socket.post( url, [data], [cb] )`\n */\n\n(function () {\n  //   ██████╗ ██████╗ ███╗   ██╗███████╗████████╗ █████╗ ███╗   ██╗████████╗███████╗\n  //  ██╔════╝██╔═══██╗████╗  ██║██╔════╝╚══██╔══╝██╔══██╗████╗  ██║╚══██╔══╝██╔════╝\n  //  ██║     ██║   ██║██╔██╗ ██║███████╗   ██║   ███████║██╔██╗ ██║   ██║   ███████╗\n  //  ██║     ██║   ██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║╚██╗██║   ██║   ╚════██║\n  //  ╚██████╗╚██████╔╝██║ ╚████║███████║   ██║   ██║  ██║██║ ╚████║   ██║   ███████║\n  //   ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝\n  //\n\n  /**\n   * Constant containing the names of all available options\n   * for individual sockets.\n   *\n   * @type {Array}\n   */\n  var SOCKET_OPTIONS = ['useCORSRouteToGetCookie', 'url', 'multiplex', 'transports', 'query', 'path', 'headers', 'initialConnectionHeaders', 'reconnection', 'reconnectionAttempts', 'reconnectionDelay', 'reconnectionDelayMax', 'rejectUnauthorized', 'randomizationFactor', 'timeout'];\n\n  /**\n   * Constant containing the names of properties on `io.sails` which\n   * may be configured using HTML attributes on the script tag which\n   * loaded this file.\n   *\n   * @type {Array}\n   *\n   * (this is unused if loading from node.js)\n   */\n  var CONFIGURABLE_VIA_HTML_ATTR = ['autoConnect', 'reconnection', 'environment', 'headers', 'url', 'transports', 'path'];\n\n  /**\n   * Constant containing the names of querystring\n   * parameters sent when connecting any SailsSocket.\n   *\n   * @type {Dictionary}\n   */\n  var CONNECTION_METADATA_PARAMS = {\n    version: '__sails_io_sdk_version',\n    platform: '__sails_io_sdk_platform',\n    language: '__sails_io_sdk_language'\n  };\n\n  /**\n   * Constant containing metadata about the platform, language, and\n   * current version of this SDK.\n   *\n   * @type {Dictionary}\n   */\n  var SDK_INFO = {\n    version: '1.2.1',\n    // <-- pulled automatically from package.json, do not change!\n    language: 'javascript',\n    platform: function () {\n      if (typeof module === 'object' && typeof module.exports !== 'undefined') {\n        return 'node';\n      } else {\n        return 'browser';\n      }\n    }()\n  };\n\n  // Build `versionString` (a querystring snippet) by\n  // combining SDK_INFO and CONNECTION_METADATA_PARAMS.\n  SDK_INFO.versionString = CONNECTION_METADATA_PARAMS.version + '=' + SDK_INFO.version + '&' + CONNECTION_METADATA_PARAMS.platform + '=' + SDK_INFO.platform + '&' + CONNECTION_METADATA_PARAMS.language + '=' + SDK_INFO.language;\n\n  //   █████╗ ██████╗ ███████╗ ██████╗ ██████╗ ██████╗     ██╗  ██╗████████╗███╗   ███╗██╗\n  //  ██╔══██╗██╔══██╗██╔════╝██╔═══██╗██╔══██╗██╔══██╗    ██║  ██║╚══██╔══╝████╗ ████║██║\n  //  ███████║██████╔╝███████╗██║   ██║██████╔╝██████╔╝    ███████║   ██║   ██╔████╔██║██║\n  //  ██╔══██║██╔══██╗╚════██║██║   ██║██╔══██╗██╔══██╗    ██╔══██║   ██║   ██║╚██╔╝██║██║\n  //  ██║  ██║██████╔╝███████║╚██████╔╝██║  ██║██████╔╝    ██║  ██║   ██║   ██║ ╚═╝ ██║███████╗\n  //  ╚═╝  ╚═╝╚═════╝ ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝     ╚═╝  ╚═╝   ╚═╝   ╚═╝     ╚═╝╚══════╝\n  //\n  //   █████╗ ████████╗████████╗██████╗ ██╗██████╗ ██╗   ██╗████████╗███████╗███████╗\n  //  ██╔══██╗╚══██╔══╝╚══██╔══╝██╔══██╗██║██╔══██╗██║   ██║╚══██╔══╝██╔════╝██╔════╝\n  //  ███████║   ██║      ██║   ██████╔╝██║██████╔╝██║   ██║   ██║   █████╗  ███████╗\n  //  ██╔══██║   ██║      ██║   ██╔══██╗██║██╔══██╗██║   ██║   ██║   ██╔══╝  ╚════██║\n  //  ██║  ██║   ██║      ██║   ██║  ██║██║██████╔╝╚██████╔╝   ██║   ███████╗███████║\n  //  ╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚═╝  ╚═╝╚═╝╚═════╝  ╚═════╝    ╚═╝   ╚══════╝╚══════╝\n  //\n  //  ███████╗██████╗  ██████╗ ███╗   ███╗      ██╗███████╗ ██████╗██████╗ ██╗██████╗ ████████╗██╗\n  //  ██╔════╝██╔══██╗██╔═══██╗████╗ ████║     ██╔╝██╔════╝██╔════╝██╔══██╗██║██╔══██╗╚══██╔══╝╚██╗\n  //  █████╗  ██████╔╝██║   ██║██╔████╔██║    ██╔╝ ███████╗██║     ██████╔╝██║██████╔╝   ██║    ╚██╗\n  //  ██╔══╝  ██╔══██╗██║   ██║██║╚██╔╝██║    ╚██╗ ╚════██║██║     ██╔══██╗██║██╔═══╝    ██║    ██╔╝\n  //  ██║     ██║  ██║╚██████╔╝██║ ╚═╝ ██║     ╚██╗███████║╚██████╗██║  ██║██║██║        ██║   ██╔╝\n  //  ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝      ╚═╝╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝╚═╝        ╚═╝   ╚═╝\n  //\n  //\n  // If available, grab the DOM element for the script tag which imported this file.\n  // (skip this if this SDK is being used outside of the DOM, i.e. in a Node process)\n  //\n  // This is used below to parse client-side sails.io.js configuration encoded as\n  // HTML attributes, as well as grabbing hold of the URL from whence the SDK was fetched.\n  var thisScriptTag = function () {\n    if (typeof window !== 'object' || typeof window.document !== 'object' || typeof window.document.getElementsByTagName !== 'function') {\n      return null;\n    }\n\n    // Return the URL of the last script loaded (i.e. this one)\n    // (this must run before nextTick; see http://stackoverflow.com/a/2976714/486547)\n    var allScriptsCurrentlyInDOM = window.document.getElementsByTagName('script');\n    return allScriptsCurrentlyInDOM[allScriptsCurrentlyInDOM.length - 1];\n  }();\n\n  // Variables to contain src URL and other script tag config (for use below).\n  var urlThisScriptWasFetchedFrom = '';\n  var scriptTagConfig = {};\n  if (thisScriptTag) {\n    // Save the URL that this script was fetched from.\n    urlThisScriptWasFetchedFrom = thisScriptTag.src;\n\n    // Now parse the most common client-side configuration settings\n    // from the script tag where they may be encoded as HTML attributes.\n    //\n    // Any configuration which may be provided as an HTML attribute may\n    // also be provided prefixed with `data-`.  This is for folks who\n    // need to support browsers that have issues with nonstandard\n    // HTML attributes (or if the idea of using nonstandard HTML attributes\n    // just creeps you out)\n    //\n    // If a `data-` prefixed attr is provided, it takes precedence.\n    // (this is so that if you are already using one of these HTML\n    //  attrs for some reason, you can keep it as-is and override\n    //  it using `data-`. If you are using the `data-` prefixed version\n    //  for some other purpose... well, in that case you'll just have to\n    //  configure programmatically using `io.sails` instead.)\n    CONFIGURABLE_VIA_HTML_ATTR.forEach(function (configKey) {\n      scriptTagConfig[configKey] = function () {\n        // Support 'data-' prefixed or normal attributes.\n        // (prefixed versions take precedence if provided)\n        var htmlAttrVal = thisScriptTag.getAttribute('data-' + configKey);\n        if (!htmlAttrVal) {\n          htmlAttrVal = thisScriptTag.getAttribute(configKey);\n        }\n\n        // The HTML attribute value should always be a string or `null`.\n        // We'll try to parse it as JSON and use that, but worst case fall back\n        // to the default situation of it being a string.\n        if (typeof htmlAttrVal === 'string') {\n          try {\n            return JSON.parse(htmlAttrVal);\n          } catch (e) {\n            return htmlAttrVal;\n          }\n        }\n        // If `null` was returned from getAttribute(), it means that the HTML attribute\n        // was not specified, so we treat it as undefined (which will cause the property\n        // to be removed below)\n        else if (htmlAttrVal === null) {\n          return undefined;\n        }\n        // Any other contingency shouldn't be possible:\n        // - if no quotes are used in the HTML attribute, it still comes in as a string.\n        // - if no RHS is provided for the attribute, it still comes in as \"\" (empty string)\n        // (but we still handle this with an explicit error just in case--for debugging and support purposes)\n        else throw new Error('sails.io.js :: Unexpected/invalid script tag configuration for `' + configKey + '`: `' + htmlAttrVal + '` (a `' + typeof htmlAttrVal + '`). Should be a string.');\n      }();\n      if (scriptTagConfig[configKey] === undefined) {\n        delete scriptTagConfig[configKey];\n      }\n    });\n\n    // Now that they've been parsed, do an extremely lean version of\n    // logical type validation/coercion of provided values.\n    //////////////////////////////////////////////////////////////////\n\n    // `autoConnect`\n    if (typeof scriptTagConfig.autoConnect !== 'undefined') {\n      if (scriptTagConfig.autoConnect === '') {\n        // Special case for empty string.  It means `true` (see above).\n        scriptTagConfig.autoConnect = true;\n      } else if (typeof scriptTagConfig.autoConnect !== 'boolean') {\n        throw new Error('sails.io.js :: Unexpected/invalid configuration for `autoConnect` provided in script tag: `' + scriptTagConfig.autoConnect + '` (a `' + typeof scriptTagConfig.autoConnect + '`). Should be a boolean.');\n      }\n    }\n\n    // `environment`\n    if (typeof scriptTagConfig.environment !== 'undefined') {\n      if (typeof scriptTagConfig.environment !== 'string') {\n        throw new Error('sails.io.js :: Unexpected/invalid configuration for `environment` provided in script tag: `' + scriptTagConfig.environment + '` (a `' + typeof scriptTagConfig.environment + '`). Should be a string.');\n      }\n    }\n\n    // `headers`\n    if (typeof scriptTagConfig.headers !== 'undefined') {\n      if (typeof scriptTagConfig.headers !== 'object' || Array.isArray(scriptTagConfig.headers)) {\n        throw new Error('sails.io.js :: Unexpected/invalid configuration for `headers` provided in script tag: `' + scriptTagConfig.headers + '` (a `' + typeof scriptTagConfig.headers + '`). Should be a JSON-compatible dictionary (i.e. `{}`).  Don\\'t forget those double quotes (\"\"), even on key names!  Use single quotes (\\'\\') to wrap the HTML attribute value; e.g. `headers=\\'{\"X-Auth\": \"foo\"}\\'`');\n      }\n    }\n\n    // `url`\n    if (typeof scriptTagConfig.url !== 'undefined') {\n      if (typeof scriptTagConfig.url !== 'string') {\n        throw new Error('sails.io.js :: Unexpected/invalid configuration for `url` provided in script tag: `' + scriptTagConfig.url + '` (a `' + typeof scriptTagConfig.url + '`). Should be a string.');\n      }\n    }\n\n    // OTHER `io.sails` options are NOT CURRENTLY SUPPORTED VIA HTML ATTRIBUTES.\n  }\n\n  // Grab a reference to the global socket.io client (if one is available).\n  // This is used via closure below to determine which `io` to use when the\n  // socket.io client instance (`io`) is augmented to become the Sails client\n  // SDK instance (still `io`).\n  var _existingGlobalSocketIO = typeof io !== 'undefined' ? io : undefined;\n\n  //////////////////////////////////////////////////////////////\n  /////\n  ///// NOW FOR BUNCHES OF:\n  /////  - PRIVATE FUNCTION DEFINITIONS\n  /////  - CONSTRUCTORS\n  /////  - AND METHODS\n  /////\n  //////////////////////////////////////////////////////////////\n  //\n\n  //  ███████╗ █████╗ ██╗██╗     ███████╗      ██╗ ██████╗        ██████╗██╗     ██╗███████╗███╗   ██╗████████╗\n  //  ██╔════╝██╔══██╗██║██║     ██╔════╝      ██║██╔═══██╗      ██╔════╝██║     ██║██╔════╝████╗  ██║╚══██╔══╝\n  //  ███████╗███████║██║██║     ███████╗█████╗██║██║   ██║█████╗██║     ██║     ██║█████╗  ██╔██╗ ██║   ██║\n  //  ╚════██║██╔══██║██║██║     ╚════██║╚════╝██║██║   ██║╚════╝██║     ██║     ██║██╔══╝  ██║╚██╗██║   ██║\n  //  ███████║██║  ██║██║███████╗███████║      ██║╚██████╔╝      ╚██████╗███████╗██║███████╗██║ ╚████║   ██║\n  //  ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝      ╚═╝ ╚═════╝        ╚═════╝╚══════╝╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝\n  //\n\n  /**\n   * SailsIOClient()\n   *\n   * Augment the provided Socket.io client object (`io`) with methods for\n   * talking and listening to one or more Sails backend(s).  If no `io` was\n   * provided (i.e. in a browser setting), then attempt to use the global.\n   *\n   * This absorbs implicit `io.sails` configuration, sets a timer for\n   * automatically connecting a socket (if `io.sails.autoConnect` is enabled)\n   * and returns the augmented `io`.\n   *\n   * Note:\n   * The automatically-connected socket is exposed as `io.socket`.  If this\n   * socket attempts to bind event listeners or send requests before it is\n   * connected, it will be queued up and replayed when the connection is\n   * successfully opened.\n   *\n   * @param {SocketIO} io\n   * @returns {SailsIOClient} [also called `io`]\n   */\n\n  function SailsIOClient(_providedSocketIO) {\n    // First, determine which `io` we're augmenting.\n    //\n    // Prefer the passed-in `io` instance, but fall back to the\n    // global one if we've got it.\n    var io;\n    if (_providedSocketIO) {\n      io = _providedSocketIO;\n    } else {\n      io = _existingGlobalSocketIO;\n    }\n    // (note that for readability, we deliberately do not short circuit or use the tertiary operator above)\n\n    // If a socket.io client (`io`) is not available, none of this will work.\n    if (!io) {\n      // If node:\n      if (SDK_INFO.platform === 'node') {\n        throw new Error('No socket.io client available.  When requiring `sails.io.js` from Node.js, a socket.io client (`io`) must be passed in; e.g.:\\n```\\nvar io = require(\\'sails.io.js\\')( require(\\'socket.io-client\\') )\\n```\\n(see https://github.com/balderdashy/sails.io.js/tree/master/test for more examples)');\n      }\n      // Otherwise, this is a web browser:\n      else {\n        throw new Error('The Sails socket SDK depends on the socket.io client, but the socket.io global (`io`) was not available when `sails.io.js` loaded.  Normally, the socket.io client code is bundled with sails.io.js, so something is a little off.  Please check to be sure this version of `sails.io.js` has the minified Socket.io client at the top of the file.');\n      }\n    }\n\n    // If the chosen socket.io client (`io`) has ALREADY BEEN AUGMENTED by this SDK,\n    // (i.e. if it already has a `.sails` property) then throw an error.\n    if (io.sails) {\n      // If node:\n      if (SDK_INFO.platform === 'node') {\n        throw new Error('The provided socket.io client (`io`) has already been augmented into a Sails socket SDK instance (it has `io.sails`).');\n      }\n      // Otherwise, this is a web browser:\n      else {\n        throw new Error('The socket.io client (`io`) has already been augmented into a Sails socket SDK instance.  Usually, this means you are bringing `sails.io.js` onto the page more than once.');\n      }\n    }\n\n    /**\n     * A little logger for this library to use internally.\n     * Basically just a wrapper around `console.log` with\n     * support for feature-detection.\n     *\n     * @api private\n     * @factory\n     */\n    function LoggerFactory(options) {\n      options = options || {\n        prefix: true\n      };\n\n      // If `console.log` is not accessible, `log` is a noop.\n      if (typeof console !== 'object' || typeof console.log !== 'function' || typeof console.log.bind !== 'function') {\n        return function noop() {};\n      }\n      return function log() {\n        var args = Array.prototype.slice.call(arguments);\n\n        // All logs are disabled when `io.sails.environment = 'production'`.\n        if (io.sails.environment === 'production') return;\n\n        // Add prefix to log messages (unless disabled)\n        var PREFIX = '';\n        if (options.prefix) {\n          args.unshift(PREFIX);\n        }\n\n        // Call wrapped logger\n        console.log.bind(console).apply(this, args);\n      };\n    } //</LoggerFactory>\n\n    // Create a private logger instance\n    var consolog = LoggerFactory();\n    consolog.noPrefix = LoggerFactory({\n      prefix: false\n    });\n\n    /**\n     * What is the `requestQueue`?\n     *\n     * The request queue is used to simplify app-level connection logic--\n     * i.e. so you don't have to wait for the socket to be connected\n     * to start trying to  synchronize data.\n     *\n     * @api private\n     * @param  {SailsSocket}  socket\n     */\n\n    function runRequestQueue(socket) {\n      var queue = socket.requestQueue;\n      if (!queue) return;\n      for (var i in queue) {\n        // Double-check that `queue[i]` will not\n        // inadvertently discover extra properties attached to the Object\n        // and/or Array prototype by other libraries/frameworks/tools.\n        // (e.g. Ember does this. See https://github.com/balderdashy/sails.io.js/pull/5)\n        var isSafeToDereference = {}.hasOwnProperty.call(queue, i);\n        if (isSafeToDereference) {\n          // Get the arguments that were originally made to the \"request\" method\n          var requestArgs = queue[i];\n          // Call the request method again in the context of the socket, with the original args\n          socket.request.apply(socket, requestArgs);\n        }\n      }\n\n      // Now empty the queue to remove it as a source of additional complexity.\n      socket.requestQueue = null;\n    }\n\n    /**\n     * Send a JSONP request.\n     *\n     * @param  {Object}   opts [optional]\n     * @param  {Function} cb\n     * @return {XMLHttpRequest}\n     */\n\n    function jsonp(opts, cb) {\n      opts = opts || {};\n      if (typeof window === 'undefined') {\n        // FUTURE: refactor node usage to live in here\n        return cb();\n      }\n      var scriptEl = document.createElement('script');\n      window._sailsIoJSConnect = function (response) {\n        // In rare circumstances our script may have been vaporised.\n        // Remove it, but only if it still exists\n        // https://github.com/balderdashy/sails.io.js/issues/92\n        if (scriptEl && scriptEl.parentNode) {\n          scriptEl.parentNode.removeChild(scriptEl);\n        }\n        cb(response);\n      };\n      scriptEl.src = opts.url;\n      document.getElementsByTagName('head')[0].appendChild(scriptEl);\n    }\n\n    //       ██╗███████╗ ██████╗ ███╗   ██╗      ██╗    ██╗███████╗██████╗ ███████╗ ██████╗  ██████╗██╗  ██╗███████╗████████╗\n    //       ██║██╔════╝██╔═══██╗████╗  ██║      ██║    ██║██╔════╝██╔══██╗██╔════╝██╔═══██╗██╔════╝██║ ██╔╝██╔════╝╚══██╔══╝\n    //       ██║███████╗██║   ██║██╔██╗ ██║█████╗██║ █╗ ██║█████╗  ██████╔╝███████╗██║   ██║██║     █████╔╝ █████╗     ██║\n    //  ██   ██║╚════██║██║   ██║██║╚██╗██║╚════╝██║███╗██║██╔══╝  ██╔══██╗╚════██║██║   ██║██║     ██╔═██╗ ██╔══╝     ██║\n    //  ╚█████╔╝███████║╚██████╔╝██║ ╚████║      ╚███╔███╔╝███████╗██████╔╝███████║╚██████╔╝╚██████╗██║  ██╗███████╗   ██║\n    //   ╚════╝ ╚══════╝ ╚═════╝ ╚═╝  ╚═══╝       ╚══╝╚══╝ ╚══════╝╚═════╝ ╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝\n    //\n    //  ██████╗ ███████╗███████╗██████╗  ██████╗ ███╗   ██╗███████╗███████╗     ██╗     ██╗██╗    ██╗██████╗ ██╗\n    //  ██╔══██╗██╔════╝██╔════╝██╔══██╗██╔═══██╗████╗  ██║██╔════╝██╔════╝    ██╔╝     ██║██║    ██║██╔══██╗╚██╗\n    //  ██████╔╝█████╗  ███████╗██████╔╝██║   ██║██╔██╗ ██║███████╗█████╗      ██║      ██║██║ █╗ ██║██████╔╝ ██║\n    //  ██╔══██╗██╔══╝  ╚════██║██╔═══╝ ██║   ██║██║╚██╗██║╚════██║██╔══╝      ██║ ██   ██║██║███╗██║██╔══██╗ ██║\n    //  ██║  ██║███████╗███████║██║     ╚██████╔╝██║ ╚████║███████║███████╗    ╚██╗╚█████╔╝╚███╔███╔╝██║  ██║██╔╝\n    //  ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝      ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚══════╝     ╚═╝ ╚════╝  ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝\n    //\n\n    /**\n     * The JWR (JSON WebSocket Response) received from a Sails server.\n     *\n     * @api public\n     * @param  {Object}  responseCtx\n     *         => :body\n     *         => :statusCode\n     *         => :headers\n     *\n     * @constructor\n     */\n\n    function JWR(responseCtx) {\n      this.body = responseCtx.body;\n      this.headers = responseCtx.headers || {};\n      this.statusCode = typeof responseCtx.statusCode === 'undefined' ? 200 : responseCtx.statusCode;\n      // FUTURE: Replace this typeof short-circuit with an assertion (statusCode should always be set)\n\n      if (this.statusCode < 200 || this.statusCode >= 400) {\n        // Determine the appropriate error message.\n        var msg;\n        if (this.statusCode === 0) {\n          msg = 'The socket request failed.';\n        } else {\n          msg = 'Server responded with a ' + this.statusCode + ' status code';\n          msg += ':\\n```\\n' + JSON.stringify(this.body, null, 2) + '\\n```';\n          // (^^Note that we should always be able to rely on socket.io to give us\n          // non-circular data here, so we don't have to worry about wrapping the\n          // above in a try...catch)\n        }\n\n        // Now build and attach Error instance.\n        this.error = new Error(msg);\n      }\n    }\n    JWR.prototype.toString = function () {\n      return '[ResponseFromSails]' + '  -- ' + 'Status: ' + this.statusCode + '  -- ' + 'Headers: ' + this.headers + '  -- ' + 'Body: ' + this.body;\n    };\n    JWR.prototype.toPOJO = function () {\n      return {\n        body: this.body,\n        headers: this.headers,\n        statusCode: this.statusCode\n      };\n    };\n    JWR.prototype.pipe = function () {\n      // FUTURE: look at substack's stuff\n      return new Error('Client-side streaming support not implemented yet.');\n    };\n\n    //          ███████╗███╗   ███╗██╗████████╗███████╗██████╗  ██████╗ ███╗   ███╗ ██╗██╗\n    //          ██╔════╝████╗ ████║██║╚══██╔══╝██╔════╝██╔══██╗██╔═══██╗████╗ ████║██╔╝╚██╗\n    //          █████╗  ██╔████╔██║██║   ██║   █████╗  ██████╔╝██║   ██║██╔████╔██║██║  ██║\n    //          ██╔══╝  ██║╚██╔╝██║██║   ██║   ██╔══╝  ██╔══██╗██║   ██║██║╚██╔╝██║██║  ██║\n    //  ███████╗███████╗██║ ╚═╝ ██║██║   ██║   ██║     ██║  ██║╚██████╔╝██║ ╚═╝ ██║╚██╗██╔╝\n    //  ╚══════╝╚══════╝╚═╝     ╚═╝╚═╝   ╚═╝   ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝ ╚═╝╚═╝\n    //\n\n    /**\n     * @api private\n     * @param  {SailsSocket} socket  [description]\n     * @param  {Object} requestCtx [description]\n     */\n\n    function _emitFrom(socket, requestCtx) {\n      if (!socket._raw) {\n        throw new Error('Failed to emit from socket- raw SIO socket is missing.');\n      }\n\n      // Since callback is embedded in requestCtx,\n      // retrieve it and delete the key before continuing.\n      var cb = requestCtx.cb;\n      delete requestCtx.cb;\n\n      // Name of the appropriate socket.io listener on the server\n      // ( === the request method or \"verb\", e.g. 'get', 'post', 'put', etc. )\n      var sailsEndpoint = requestCtx.method;\n      socket._raw.emit(sailsEndpoint, requestCtx, function serverResponded(responseCtx) {\n        // Send back (emulatedHTTPBody, jsonWebSocketResponse)\n        if (cb && !requestCtx.calledCb) {\n          cb(responseCtx.body, new JWR(responseCtx));\n          // Set flag indicating that callback was called, to avoid duplicate calls.\n          requestCtx.calledCb = true;\n          // Remove the callback from the list.\n          socket._responseCbs.splice(socket._responseCbs.indexOf(cb), 1);\n          // Remove the context from the list.\n          socket._requestCtxs.splice(socket._requestCtxs.indexOf(requestCtx), 1);\n        }\n      });\n    }\n\n    //  ███████╗ █████╗ ██╗██╗     ███████╗███████╗ ██████╗  ██████╗██╗  ██╗███████╗████████╗\n    //  ██╔════╝██╔══██╗██║██║     ██╔════╝██╔════╝██╔═══██╗██╔════╝██║ ██╔╝██╔════╝╚══██╔══╝\n    //  ███████╗███████║██║██║     ███████╗███████╗██║   ██║██║     █████╔╝ █████╗     ██║\n    //  ╚════██║██╔══██║██║██║     ╚════██║╚════██║██║   ██║██║     ██╔═██╗ ██╔══╝     ██║\n    //  ███████║██║  ██║██║███████╗███████║███████║╚██████╔╝╚██████╗██║  ██╗███████╗   ██║\n    //  ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝\n    //\n\n    /**\n     * SailsSocket\n     *\n     * A wrapper for an underlying Socket instance that communicates directly\n     * to the Socket.io server running inside of Sails.\n     *\n     * If no `socket` option is provied, SailsSocket will function as a mock. It will queue socket\n     * requests and event handler bindings, replaying them when the raw underlying socket actually\n     * connects. This is handy when we don't necessarily have the valid configuration to know\n     * WHICH SERVER to talk to yet, etc.  It is also used by `io.socket` for your convenience.\n     *\n     * @constructor\n     * @api private\n     *\n     * ----------------------------------------------------------------------\n     * Note: This constructor should not be used directly. To obtain a `SailsSocket`\n     * instance of your very own, run:\n     * ```\n     * var mySocket = io.sails.connect();\n     * ```\n     * ----------------------------------------------------------------------\n     */\n    function SailsSocket(opts) {\n      var self = this;\n      opts = opts || {};\n\n      // Initialize private properties\n      self._isConnecting = false;\n      self._mightBeAboutToAutoConnect = false;\n\n      // Set up connection options so that they can only be changed when socket is disconnected.\n      var _opts = {};\n      SOCKET_OPTIONS.forEach(function (option) {\n        // Okay to change global headers while socket is connected\n        if (option == 'headers') {\n          return;\n        }\n        Object.defineProperty(self, option, {\n          get: function () {\n            if (option == 'url') {\n              return _opts[option] || self._raw && self._raw.io && self._raw.io.uri;\n            }\n            return _opts[option];\n          },\n          set: function (value) {\n            // Don't allow value to be changed while socket is connected\n            if (self.isConnected() && io.sails.strict !== false && value != _opts[option]) {\n              throw new Error('Cannot change value of `' + option + '` while socket is connected.');\n            }\n            // If socket is attempting to reconnect, stop it.\n            if (self._raw && self._raw.io && self._raw.io.reconnecting && !self._raw.io.skipReconnect) {\n              self._raw.io.skipReconnect = true;\n              consolog('Stopping reconnect; use .reconnect() to connect socket after changing options.');\n            }\n            _opts[option] = value;\n          }\n        });\n      });\n\n      // Absorb opts into SailsSocket instance\n      // See http://sailsjs.com/documentation/reference/web-sockets/socket-client/sails-socket/properties\n      // for description of options\n      SOCKET_OPTIONS.forEach(function (option) {\n        self[option] = opts[option];\n      });\n\n      // Set up \"eventQueue\" to hold event handlers which have not been set on the actual raw socket yet.\n      self.eventQueue = {};\n\n      // Listen for special `parseError` event sent from sockets hook on the backend\n      // if an error occurs but a valid callback was not received from the client\n      // (i.e. so the server had no other way to send back the error information)\n      self.on('sails:parseError', function (err) {\n        consolog('Sails encountered an error parsing a socket message sent from this client, and did not have access to a callback function to respond with.');\n        consolog('Error details:', err);\n      });\n\n      // FUTURE:\n      // Listen for a special private message on any connected that allows the server\n      // to set the environment (giving us 100% certainty that we guessed right)\n      // However, note that the `console.log`s called before and after connection\n      // are still forced to rely on our existing heuristics (to disable, tack #production\n      // onto the URL used to fetch this file.)\n    } //</SailsSocket>\n\n    /**\n     * `SailsSocket.prototype._connect()`\n     *\n     * Begin connecting this socket to the server.\n     *\n     * @api private\n     */\n    SailsSocket.prototype._connect = function () {\n      var self = this;\n      self._isConnecting = true;\n\n      // Apply `io.sails` config as defaults\n      // (now that at least one tick has elapsed)\n      // See http://sailsjs.com/documentation/reference/web-sockets/socket-client/sails-socket/properties\n      // for description of options and default values\n      SOCKET_OPTIONS.forEach(function (option) {\n        if ('undefined' == typeof self[option]) {\n          self[option] = io.sails[option];\n        }\n      });\n\n      // Headers that will be sent with the initial request to /socket.io (Node.js only)\n      self.extraHeaders = self.initialConnectionHeaders || {};\n\n      // For browser usage (currently works with \"polling\" transport only)\n      self.transportOptions = self.transportOptions || {};\n      self.transports.forEach(function (transport) {\n        self.transportOptions[transport] = self.transportOptions[transport] || {};\n        self.transportOptions[transport].extraHeaders = self.initialConnectionHeaders || {};\n      });\n\n      // Log a warning if non-Node.js platform attempts to use `initialConnectionHeaders` for anything other than `polling`.\n      if (self.initialConnectionHeaders && SDK_INFO.platform !== 'node' && self.transports.indexOf('polling') === -1 || self.transports.length > 1) {\n        if (typeof console === 'object' && typeof console.warn === 'function') {\n          console.warn('When running in browser, `initialConnectionHeaders` option is only available for the `polling` transport.');\n        }\n      }\n\n      // Ensure URL has no trailing slash\n      self.url = self.url ? self.url.replace(/(\\/)$/, '') : undefined;\n\n      // Mix the current SDK version into the query string in\n      // the connection request to the server:\n      if (typeof self.query === 'string') {\n        // (If provided as a string, trim leading question mark,\n        // just in case one was provided.)\n        self.query = self.query.replace(/^\\?/, '');\n        self.query += '&' + SDK_INFO.versionString;\n      } else if (self.query && typeof self.query === 'object') {\n        throw new Error('`query` setting does not currently support configuration as a dictionary (`{}`).  Instead, it must be specified as a string like `foo=89&bar=hi`');\n      } else if (!self.query) {\n        self.query = SDK_INFO.versionString;\n      } else {\n        throw new Error('Unexpected data type provided for `query` setting: ' + self.query);\n      }\n\n      // Determine whether this is a cross-origin socket by examining the\n      // hostname and port on the `window.location` object.  If it's cross-origin,\n      // we'll attempt to get a cookie for the domain so that a Sails session can\n      // be established.\n      var isXOrigin = function () {\n        // If `window` doesn't exist (i.e. being used from Node.js), then\n        // we won't bother attempting to get a cookie.  If you're using sockets\n        // from Node.js and find you need to share a session between multiple\n        // socket connections, you'll need to make an HTTP request to the /__getcookie\n        // endpoint of the Sails server (or any endpoint that returns a set-cookie header)\n        // and then use the cookie value in the `initialConnectionHeaders` option to\n        // io.sails.connect()\n        if (typeof window === 'undefined' || typeof window.location === 'undefined') {\n          return false;\n        }\n\n        // If `self.url` (aka \"target\") is falsy, then we don't need to worry about it.\n        if (typeof self.url !== 'string') {\n          return false;\n        }\n\n        // Get information about the \"target\" (`self.url`)\n        var targetProtocol = function () {\n          try {\n            targetProtocol = self.url.match(/^([a-z]+:\\/\\/)/i)[1].toLowerCase();\n          } catch (e) {}\n          targetProtocol = targetProtocol || 'http://';\n          return targetProtocol;\n        }();\n        var isTargetSSL = !!self.url.match('^https');\n        var targetPort = function () {\n          try {\n            return self.url.match(/^[a-z]+:\\/\\/[^:]*:([0-9]*)/i)[1];\n          } catch (e) {}\n          return isTargetSSL ? '443' : '80';\n        }();\n        var targetAfterProtocol = self.url.replace(/^([a-z]+:\\/\\/)/i, '');\n\n        // If target protocol is different than the actual protocol,\n        // then we'll consider this cross-origin.\n        if (targetProtocol.replace(/[:\\/]/g, '') !== window.location.protocol.replace(/[:\\/]/g, '')) {\n          return true;\n        }\n\n        // If target hostname is different than actual hostname, we'll consider this cross-origin.\n        var hasSameHostname = targetAfterProtocol.search(window.location.hostname) === 0;\n        if (!hasSameHostname) {\n          return true;\n        }\n\n        // If no actual port is explicitly set on the `window.location` object,\n        // we'll assume either 80 or 443.\n        var isLocationSSL = window.location.protocol.match(/https/i);\n        var locationPort = window.location.port + '' || (isLocationSSL ? '443' : '80');\n\n        // Finally, if ports don't match, we'll consider this cross-origin.\n        if (targetPort !== locationPort) {\n          return true;\n        }\n\n        // Otherwise, it's the same origin.\n        return false;\n      }();\n\n      // Prepare to start connecting the socket\n      (function selfInvoking(cb) {\n        // If this is an attempt at a cross-origin or cross-port\n        // socket connection via a browswe, send a JSONP request\n        // first to ensure that a valid cookie is available.\n        // This can be disabled by setting `io.sails.useCORSRouteToGetCookie`\n        // to false.\n        //\n        // Otherwise, skip the stuff below.\n        //\n        if (!(self.useCORSRouteToGetCookie && isXOrigin)) {\n          return cb();\n        }\n\n        // Figure out the x-origin CORS route\n        // (Sails provides a default)\n        var xOriginCookieURL = self.url;\n        if (typeof self.useCORSRouteToGetCookie === 'string') {\n          xOriginCookieURL += self.useCORSRouteToGetCookie;\n        } else {\n          xOriginCookieURL += '/__getcookie';\n        }\n\n        // Make the AJAX request (CORS)\n        jsonp({\n          url: xOriginCookieURL,\n          method: 'GET'\n        }, cb);\n      })(function goAheadAndActuallyConnect() {\n        // Now that we're ready to connect, create a raw underlying Socket\n        // using Socket.io and save it as `_raw` (this will start it connecting)\n        self._raw = io(self.url, self);\n\n        // If the low-level transport throws an error _while connecting_, then set the _isConnecting flag\n        // to false (since we're no longer connecting with any chance of success anyway).\n        // Also, in this case (and in dev mode only) log a helpful message.\n        self._raw.io.engine.transport.on('error', function (err) {\n          if (!self._isConnecting) {\n            return;\n          }\n          self._isConnecting = false;\n\n          // Track this timestamp for use in reconnection messages\n          // (only relevant if reconnection is enabled.)\n          self.connectionErrorTimestamp = new Date().getTime();\n\n          // Development-only message:\n          consolog('====================================');\n          consolog('The socket was unable to connect.');\n          consolog('The server may be offline, or the');\n          consolog('socket may have failed authorization');\n          consolog('based on its origin or other factors.');\n          consolog('You may want to check the values of');\n          consolog('`sails.config.sockets.onlyAllowOrigins`');\n          consolog('or (more rarely) `sails.config.sockets.beforeConnect`');\n          consolog('in your app.');\n          consolog('More info: https://sailsjs.com/config/sockets');\n          consolog('For help: https://sailsjs.com/support');\n          consolog('');\n          consolog('Technical details:');\n          consolog(err);\n          consolog('====================================');\n        });\n\n        // Replay event bindings from the eager socket\n        self.replay();\n\n        /**\n         * 'connect' event is triggered when the socket establishes a connection\n         *  successfully.\n         */\n        self.on('connect', function socketConnected() {\n          self._isConnecting = false;\n          consolog.noPrefix('\\n' + '\\n' +\n          // '    |>    ' + '\\n' +\n          // '  \\\\___/  '+️\n          // '\\n'+\n          '  |>    Now connected to ' + (self.url ? self.url : 'Sails') + '.' + '\\n' + '\\\\___/   For help, see: http://bit.ly/2q0QDpf' + '\\n' + '        (using sails.io.js ' + io.sails.sdk.platform + ' SDK @v' + io.sails.sdk.version + ')' + '\\n' + '         Connected at: ' + new Date() + '\\n' + '\\n' + '\\n' +\n          // '\\n'+\n          ''\n          // ' ⚓︎ (development mode)'\n          // 'e.g. to send a GET request to Sails via WebSockets, run:'+ '\\n' +\n          // '`io.socket.get(\"/foo\", function serverRespondedWith (body, jwr) { console.log(body); })`'+ '\\n' +\n          );\n        });\n\n        self.on('disconnect', function () {\n          // Get a timestamp of when the disconnect was detected.\n          self.connectionLostTimestamp = new Date().getTime();\n\n          // Get a shallow clone of the internal array of response callbacks, in case any of the callbacks mutate it.\n          var responseCbs = [].concat(self._responseCbs || []);\n          // Wipe the internal array of response callbacks before executing them, in case a callback happens to add\n          // a new request to the queue.\n          self._responseCbs = [];\n\n          // Do the same for the internal request context list.\n          var requestCtxs = [].concat(self._requestCtxs || []);\n          self._requestCtxs = [];\n\n          // Loop through the callbacks for all in-progress requests, and call them each with an error indicating the disconnect.\n          if (responseCbs.length) {\n            responseCbs.forEach(function (responseCb) {\n              responseCb(new Error('The socket disconnected before the request completed.'), {\n                body: null,\n                statusCode: 0,\n                headers: {}\n              });\n            });\n          }\n\n          // If there is a list of request contexts, indicate that their callbacks have been\n          // called and then wipe the list.  This prevents errors in the edge case of a response\n          // somehow coming back after the socket reconnects.\n          if (requestCtxs.length) {\n            requestCtxs.forEach(function (requestCtx) {\n              requestCtx.calledCb = true;\n            });\n          }\n          consolog('====================================');\n          consolog('Socket was disconnected from Sails.');\n          consolog('Usually, this is due to one of the following reasons:' + '\\n' + ' -> the server ' + (self.url ? self.url + ' ' : '') + 'was taken down' + '\\n' + ' -> your browser lost internet connectivity');\n          consolog('====================================');\n        });\n        self.on('reconnecting', function (numAttempts) {\n          consolog('\\n' + '        Socket is trying to reconnect to ' + (self.url ? self.url : 'Sails') + '...\\n' + '_-|>_-  (attempt #' + numAttempts + ')' + '\\n' + '\\n');\n        });\n        self.on('reconnect', function (transport, numAttempts) {\n          if (!self._isConnecting) {\n            self.on('connect', runRequestQueue.bind(self, self));\n          }\n          var msSinceLastOffline;\n          var numSecsOffline;\n          if (self.connectionLostTimestamp) {\n            msSinceLastOffline = new Date().getTime() - self.connectionLostTimestamp;\n            numSecsOffline = msSinceLastOffline / 1000;\n          } else if (self.connectionErrorTimestamp) {\n            msSinceLastOffline = new Date().getTime() - self.connectionErrorTimestamp;\n            numSecsOffline = msSinceLastOffline / 1000;\n          } else {\n            msSinceLastOffline = '???';\n            numSecsOffline = '???';\n          }\n          consolog('\\n' + '  |>    Socket reconnected successfully after' + '\\n' + '\\\\___/   being offline at least ' + numSecsOffline + ' seconds.' + '\\n' + '\\n');\n        });\n\n        // 'error' event is triggered if connection can not be established.\n        // (usually because of a failed authorization, which is in turn\n        // usually due to a missing or invalid cookie)\n        self.on('error', function failedToConnect(err) {\n          self._isConnecting = false;\n          ////////////////////////////////////////////////////////////////////////////////////\n          // Note:\n          // In the future, we could provide a separate event for when a socket cannot connect\n          // due to a failed `beforeConnect` (aka \"authorization\" if you're old school).\n          // this could probably be implemented by emitting a special event from the server.\n          ////////////////////////////////////////////////////////////////////////////////////\n\n          consolog('Failed to connect socket (possibly due to failed `beforeConnect` on server)', 'Error:', err);\n        });\n      });\n    };\n\n    /**\n     * Reconnect the underlying socket.\n     *\n     * @api public\n     */\n    SailsSocket.prototype.reconnect = function () {\n      if (this._isConnecting) {\n        throw new Error('Cannot connect- socket is already connecting');\n      }\n      if (this.isConnected()) {\n        throw new Error('Cannot connect- socket is already connected');\n      }\n      return this._connect();\n    };\n\n    /**\n     * Disconnect the underlying socket.\n     *\n     * @api public\n     */\n    SailsSocket.prototype.disconnect = function () {\n      this._isConnecting = false;\n      if (!this.isConnected()) {\n        throw new Error('Cannot disconnect- socket is already disconnected');\n      }\n      return this._raw.disconnect();\n    };\n\n    /**\n     * isConnected\n     *\n     * @return {Boolean} whether the socket is connected and able to\n     *                   communicate w/ the server.\n     */\n\n    SailsSocket.prototype.isConnected = function () {\n      if (!this._raw) {\n        return false;\n      }\n      return !!this._raw.connected;\n    };\n\n    /**\n     * isConnecting\n     *\n     * @return {Boolean} whether the socket is in the process of connecting\n     *                   to the server.\n     */\n\n    SailsSocket.prototype.isConnecting = function () {\n      return this._isConnecting;\n    };\n\n    /**\n     * isConnecting\n     *\n     * @return {Boolean} flag that is `true` after a SailsSocket instance is\n     *                   initialized but before one tick of the event loop\n     *                   has passed (so that it hasn't attempted to connect\n     *                   yet, if autoConnect ends up being configured `true`)\n     */\n    SailsSocket.prototype.mightBeAboutToAutoConnect = function () {\n      return this._mightBeAboutToAutoConnect;\n    };\n\n    /**\n     * [replay description]\n     * @return {[type]} [description]\n     */\n    SailsSocket.prototype.replay = function () {\n      var self = this;\n\n      // Pass events and a reference to the request queue\n      // off to the self._raw for consumption\n      for (var evName in self.eventQueue) {\n        for (var i in self.eventQueue[evName]) {\n          self._raw.on(evName, self.eventQueue[evName][i]);\n        }\n      }\n\n      // Bind a one-time function to run the request queue\n      // when the self._raw connects.\n      if (!self.isConnected()) {\n        self._raw.once('connect', runRequestQueue.bind(self, self));\n      }\n      // Or run it immediately if self._raw is already connected\n      else {\n        runRequestQueue(self);\n      }\n      return self;\n    };\n\n    /**\n     * Chainable method to bind an event to the socket.\n     *\n     * @param  {String}   evName [event name]\n     * @param  {Function} fn     [event handler function]\n     * @return {SailsSocket}\n     */\n    SailsSocket.prototype.on = function (evName, fn) {\n      // Bind the event to the raw underlying socket if possible.\n      if (this._raw) {\n        this._raw.on(evName, fn);\n        return this;\n      }\n\n      // Otherwise queue the event binding.\n      if (!this.eventQueue[evName]) {\n        this.eventQueue[evName] = [fn];\n      } else {\n        this.eventQueue[evName].push(fn);\n      }\n      return this;\n    };\n\n    /**\n     * Chainable method to unbind an event from the socket.\n     *\n     * @param  {String}   evName [event name]\n     * @param  {Function} fn     [event handler function]\n     * @return {SailsSocket}\n     */\n    SailsSocket.prototype.off = function (evName, fn) {\n      // Bind the event to the raw underlying socket if possible.\n      if (this._raw) {\n        this._raw.off(evName, fn);\n        return this;\n      }\n\n      // Otherwise queue the event binding.\n      if (this.eventQueue[evName] && this.eventQueue[evName].indexOf(fn) > -1) {\n        this.eventQueue[evName].splice(this.eventQueue[evName].indexOf(fn), 1);\n      }\n      return this;\n    };\n\n    /**\n     * Chainable method to unbind all events from the socket.\n     *\n     * @return {SailsSocket}\n     */\n    SailsSocket.prototype.removeAllListeners = function () {\n      // Bind the event to the raw underlying socket if possible.\n      if (this._raw) {\n        this._raw.removeAllListeners();\n        return this;\n      }\n\n      // Otherwise queue the event binding.\n      this.eventQueue = {};\n      return this;\n    };\n\n    /**\n     * Simulate a GET request to sails\n     * e.g.\n     *    `socket.get('/user/3', Stats.populate)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype.get = function (url, data, cb) {\n      // `data` is optional\n      if (typeof data === 'function') {\n        cb = data;\n        data = {};\n      }\n      return this.request({\n        method: 'get',\n        params: data,\n        url: url\n      }, cb);\n    };\n\n    /**\n     * Simulate a POST request to sails\n     * e.g.\n     *    `socket.post('/event', newMeeting, $spinner.hide)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype.post = function (url, data, cb) {\n      // `data` is optional\n      if (typeof data === 'function') {\n        cb = data;\n        data = {};\n      }\n      return this.request({\n        method: 'post',\n        data: data,\n        url: url\n      }, cb);\n    };\n\n    /**\n     * Simulate a PUT request to sails\n     * e.g.\n     *    `socket.post('/event/3', changedFields, $spinner.hide)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype.put = function (url, data, cb) {\n      // `data` is optional\n      if (typeof data === 'function') {\n        cb = data;\n        data = {};\n      }\n      return this.request({\n        method: 'put',\n        params: data,\n        url: url\n      }, cb);\n    };\n\n    /**\n     * Simulate a PATCH request to sails\n     * e.g.\n     *    `socket.patch('/event/3', changedFields, $spinner.hide)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype.patch = function (url, data, cb) {\n      // `data` is optional\n      if (typeof data === 'function') {\n        cb = data;\n        data = {};\n      }\n      return this.request({\n        method: 'patch',\n        params: data,\n        url: url\n      }, cb);\n    };\n\n    /**\n     * Simulate a DELETE request to sails\n     * e.g.\n     *    `socket.delete('/event', $spinner.hide)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype['delete'] = function (url, data, cb) {\n      // `data` is optional\n      if (typeof data === 'function') {\n        cb = data;\n        data = {};\n      }\n      return this.request({\n        method: 'delete',\n        params: data,\n        url: url\n      }, cb);\n    };\n\n    /**\n     * Simulate an HTTP request to sails\n     * e.g.\n     * ```\n     * socket.request({\n     *   url:'/user',\n     *   params: {},\n     *   method: 'POST',\n     *   headers: {}\n     * }, function (responseBody, JWR) {\n     *   // ...\n     * });\n     * ```\n     *\n     * @api public\n     * @option {String} url    ::    destination URL\n     * @option {Object} params ::    parameters to send with the request [optional]\n     * @option {Object} headers::    headers to send with the request [optional]\n     * @option {Function} cb   ::    callback function to call when finished [optional]\n     * @option {String} method ::    HTTP request method [optional]\n     */\n\n    SailsSocket.prototype.request = function (options, cb) {\n      var usage = 'Usage:\\n' + 'socket.request( options, [fnToCallWhenComplete] )\\n\\n' + 'options.url :: e.g. \"/foo/bar\"' + '\\n' + 'options.method :: e.g. \"get\", \"post\", \"put\", or \"delete\", etc.' + '\\n' + 'options.params :: e.g. { emailAddress: \"mike@example.com\" }' + '\\n' + 'options.headers :: e.g. { \"x-my-custom-header\": \"some string\" }';\n      // Old usage:\n      // var usage = 'Usage:\\n socket.'+(options.method||'request')+'('+\n      //   ' destinationURL, [dataToSend], [fnToCallWhenComplete] )';\n\n      // Validate options and callback\n      if (typeof cb !== 'undefined' && typeof cb !== 'function') {\n        throw new Error('Invalid callback function!\\n' + usage);\n      }\n      if (typeof options !== 'object' || typeof options.url !== 'string') {\n        throw new Error('Invalid or missing URL!\\n' + usage);\n      }\n      if (options.method && typeof options.method !== 'string') {\n        throw new Error('Invalid `method` provided (should be a string like \"post\" or \"put\")\\n' + usage);\n      }\n      if (options.headers && typeof options.headers !== 'object') {\n        throw new Error('Invalid `headers` provided (should be a dictionary with string values)\\n' + usage);\n      }\n      if (options.params && typeof options.params !== 'object') {\n        throw new Error('Invalid `params` provided (should be a dictionary with JSON-serializable values)\\n' + usage);\n      }\n      if (options.data && typeof options.data !== 'object') {\n        throw new Error('Invalid `data` provided (should be a dictionary with JSON-serializable values)\\n' + usage);\n      }\n\n      // Accept either `params` or `data` for backwards compatibility (but not both!)\n      if (options.data && options.params) {\n        throw new Error('Cannot specify both `params` and `data`!  They are aliases of each other.\\n' + usage);\n      } else if (options.data) {\n        options.params = options.data;\n        delete options.data;\n      }\n\n      // If this socket is not connected yet, queue up this request\n      // instead of sending it.\n      // (so it can be replayed when the socket comes online.)\n      if (!this.isConnected()) {\n        // If no queue array exists for this socket yet, create it.\n        this.requestQueue = this.requestQueue || [];\n        this.requestQueue.push([options, cb]);\n        return;\n      }\n\n      // Otherwise, our socket is connected, so continue prepping\n      // the request.\n\n      // Default headers to an empty object\n      options.headers = options.headers || {};\n\n      // Build a simulated request object\n      // (and sanitize/marshal options along the way)\n      var requestCtx = {\n        method: (options.method || 'get').toLowerCase(),\n        headers: options.headers,\n        data: options.params || options.data || {},\n        // Remove trailing slashes and spaces to make packets smaller.\n        url: options.url.replace(/^(.+)\\/*\\s*$/, '$1'),\n        cb: cb\n      };\n\n      // Get a reference to the callback list, or create a new one.\n      this._responseCbs = this._responseCbs || [];\n\n      // Get a reference to the request context list, or create a new one.\n      this._requestCtxs = this._requestCtxs || [];\n\n      // Add this callback to the list.  If the socket disconnects, we'll call\n      // each cb in the list with an error and reset the list.  Otherwise the\n      // cb will be removed from the list when the server responds.\n      // Also add the request context to the list.  It will be removed once\n      // the response comes back, or if the socket disconnects.\n      if (cb) {\n        this._responseCbs.push(cb);\n        this._requestCtxs.push(requestCtx);\n      }\n\n      // Merge global headers in, if there are any.\n      if (this.headers && 'object' === typeof this.headers) {\n        for (var header in this.headers) {\n          if (!options.headers.hasOwnProperty(header)) {\n            options.headers[header] = this.headers[header];\n          }\n        }\n      }\n\n      // Send the request.\n      _emitFrom(this, requestCtx);\n    };\n\n    /**\n     * Socket.prototype._request\n     *\n     * Simulate HTTP over Socket.io.\n     *\n     * @api private\n     * @param  {[type]}   options [description]\n     * @param  {Function} cb      [description]\n     */\n    SailsSocket.prototype._request = function (options, cb) {\n      throw new Error('`_request()` was a private API deprecated as of v0.11 of the sails.io.js client. Use `.request()` instead.');\n    };\n\n    //  ██╗ ██████╗    ███████╗ █████╗ ██╗██╗     ███████╗\n    //  ██║██╔═══██╗   ██╔════╝██╔══██╗██║██║     ██╔════╝\n    //  ██║██║   ██║   ███████╗███████║██║██║     ███████╗\n    //  ██║██║   ██║   ╚════██║██╔══██║██║██║     ╚════██║\n    //  ██║╚██████╔╝██╗███████║██║  ██║██║███████╗███████║\n    //  ╚═╝ ╚═════╝ ╚═╝╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝\n    //\n    // Set an `io.sails` object that may be used for configuration before the\n    // first socket connects (i.e. to allow auto-connect behavior to be\n    // prevented by setting `io.sails.autoConnect` in an inline script\n    // directly after the script tag which loaded this file).\n\n    //  ┌─┐┌─┐┌┬┐  ┬ ┬┌─┐  ╔╦╗╔═╗╔═╗╔═╗╦ ╦╦ ╔╦╗╔═╗  ┌─┐┌─┐┬─┐  ┬┌─┐ ┌─┐┌─┐┬┬  ┌─┐\n    //  └─┐├┤  │   │ │├─┘   ║║║╣ ╠╣ ╠═╣║ ║║  ║ ╚═╗  ├┤ │ │├┬┘  ││ │ └─┐├─┤││  └─┐\n    //  └─┘└─┘ ┴   └─┘┴    ═╩╝╚═╝╚  ╩ ╩╚═╝╩═╝╩ ╚═╝  └  └─┘┴└─  ┴└─┘o└─┘┴ ┴┴┴─┘└─┘\n    io.sails = {\n      // Whether to automatically connect a socket and save it as `io.socket`.\n      autoConnect: true,\n      // Whether to automatically try to reconnect after connection is lost\n      reconnection: false,\n      // The route (path) to hit to get a x-origin (CORS) cookie\n      // (or true to use the default: '/__getcookie')\n      useCORSRouteToGetCookie: true,\n      // The environment we're running in.\n      // (logs are not displayed when this is set to 'production')\n      //\n      // Defaults to \"development\" unless this script was fetched from a URL\n      // that ends in `*.min.js` or '#production', or if the conventional\n      // `SAILS_LOCALS` global is set with an `_environment` of \"production\"\n      // or \"staging\".  (This setting may also be manually overridden.)\n      environment: urlThisScriptWasFetchedFrom.match(/(\\#production|\\.min\\.js)/g) || typeof window === 'object' && window && typeof window.SAILS_LOCALS === 'object' && window.SAILS_LOCALS && (window.SAILS_LOCALS._environment === 'staging' || window.SAILS_LOCALS._environment === 'production') ? 'production' : 'development',\n      // The version of this sails.io.js client SDK\n      sdk: SDK_INFO,\n      // Transports to use when communicating with the server, in the order they will be tried\n      transports: ['websocket']\n    };\n\n    //  ┌─┐─┐ ┬┌┬┐┌─┐┌┐┌┌┬┐  ┬┌─┐ ┌─┐┌─┐┬┬  ┌─┐  ┌┬┐┌─┐┌─┐┌─┐┬ ┬┬ ┌┬┐┌─┐\n    //  ├┤ ┌┴┬┘ │ ├┤ │││ ││  ││ │ └─┐├─┤││  └─┐   ││├┤ ├┤ ├─┤│ ││  │ └─┐\n    //  └─┘┴ └─ ┴ └─┘┘└┘─┴┘  ┴└─┘o└─┘┴ ┴┴┴─┘└─┘  ─┴┘└─┘└  ┴ ┴└─┘┴─┘┴ └─┘\n    //  ┬ ┬┬┌┬┐┬ ┬  ┌┬┐┬ ┬┌─┐  ╦ ╦╔╦╗╔╦╗╦    ╔═╗╔╦╗╔╦╗╦═╗╦╔╗ ╦ ╦╔╦╗╔═╗╔═╗\n    //  ││││ │ ├─┤   │ ├─┤├┤   ╠═╣ ║ ║║║║    ╠═╣ ║  ║ ╠╦╝║╠╩╗║ ║ ║ ║╣ ╚═╗\n    //  └┴┘┴ ┴ ┴ ┴   ┴ ┴ ┴└─┘  ╩ ╩ ╩ ╩ ╩╩═╝  ╩ ╩ ╩  ╩ ╩╚═╩╚═╝╚═╝ ╩ ╚═╝╚═╝\n    //  ┌─┐┬─┐┌─┐┌┬┐  ┌┬┐┬ ┬┌─┐  ┌─┐┌─┐┬─┐┬┌─┐┌┬┐  ┌┬┐┌─┐┌─┐\n    //  ├┤ ├┬┘│ ││││   │ ├─┤├┤   └─┐│  ├┬┘│├─┘ │    │ ├─┤│ ┬\n    //  └  ┴└─└─┘┴ ┴   ┴ ┴ ┴└─┘  └─┘└─┘┴└─┴┴   ┴    ┴ ┴ ┴└─┘\n    //\n    // Now fold in config provided as HTML attributes on the script tag:\n    // (note that if `io.sails.*` is changed after this script, those changes\n    //  will still take precedence)\n    CONFIGURABLE_VIA_HTML_ATTR.forEach(function (configKey) {\n      if (typeof scriptTagConfig[configKey] !== 'undefined') {\n        io.sails[configKey] = scriptTagConfig[configKey];\n      }\n    });\n    //////////////////////////////////////////////////////////////////////////////\n    // Note that the new HTML attribute configuration style may eventually\n    // completely replace the original approach of setting `io.sails` properties,\n    // since the new strategy is easier to reason about.  Also, it would allow us\n    // to remove the timeout below someday.\n    //////////////////////////////////////////////////////////////////////////////\n\n    //  ┬┌─┐ ┌─┐┌─┐┬┬  ┌─┐ ╔═╗╔═╗╔╗╔╔╗╔╔═╗╔═╗╔╦╗  /  \\\n    //  ││ │ └─┐├─┤││  └─┐ ║  ║ ║║║║║║║║╣ ║   ║  /   /\n    //  ┴└─┘o└─┘┴ ┴┴┴─┘└─┘o╚═╝╚═╝╝╚╝╝╚╝╚═╝╚═╝ ╩  \\  /\n\n    /**\n     * Add `io.sails.connect` function as a wrapper for the built-in `io()` aka `io.connect()`\n     * method, returning a SailsSocket. This special function respects the configured io.sails\n     * connection URL, as well as sending other identifying information (most importantly, the\n     * current version of this SDK).\n     *\n     * @param  {String} url  [optional]\n     * @param  {Object} opts [optional]\n     * @return {Socket}\n     */\n    io.sails.connect = function (url, opts) {\n      // Make URL optional\n      if ('object' === typeof url) {\n        opts = url;\n        url = null;\n      }\n\n      // Default opts to empty object\n      opts = opts || {};\n\n      // If explicit connection url is specified, save it to options\n      opts.url = url || opts.url || undefined;\n\n      // Instantiate and return a new SailsSocket- and try to connect immediately.\n      var socket = new SailsSocket(opts);\n      socket._connect();\n      return socket;\n    };\n\n    //  ██╗ ██████╗    ███████╗ ██████╗  ██████╗██╗  ██╗███████╗████████╗\n    //  ██║██╔═══██╗   ██╔════╝██╔═══██╗██╔════╝██║ ██╔╝██╔════╝╚══██╔══╝\n    //  ██║██║   ██║   ███████╗██║   ██║██║     █████╔╝ █████╗     ██║\n    //  ██║██║   ██║   ╚════██║██║   ██║██║     ██╔═██╗ ██╔══╝     ██║\n    //  ██║╚██████╔╝██╗███████║╚██████╔╝╚██████╗██║  ██╗███████╗   ██║\n    //  ╚═╝ ╚═════╝ ╚═╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝\n    //\n    // io.socket\n    //\n    // The eager instance of Socket which will automatically try to connect\n    // using the host that this js file was served from.\n    //\n    // This can be disabled or configured by setting properties on `io.sails.*` within the\n    // first cycle of the event loop.\n    //\n\n    // Build `io.socket` so it exists\n    // (note that this DOES NOT start the connection process)\n    io.socket = new SailsSocket();\n    //\n    // This socket is not connected yet, and has not even _started_ connecting.\n    //\n    // But in the mean time, this eager socket will be queue events bound by the user\n    // before the first cycle of the event loop (using `.on()`), which will later\n    // be rebound on the raw underlying socket.\n\n    //  ┌─┐┌─┐┌┬┐  ┌─┐┬ ┬┌┬┐┌─┐   ┌─┐┌─┐┌┐┌┌┐┌┌─┐┌─┐┌┬┐  ┌┬┐┬┌┬┐┌─┐┬─┐\n    //  └─┐├┤  │   ├─┤│ │ │ │ │───│  │ │││││││├┤ │   │    │ ││││├┤ ├┬┘\n    //  └─┘└─┘ ┴   ┴ ┴└─┘ ┴ └─┘   └─┘└─┘┘└┘┘└┘└─┘└─┘ ┴    ┴ ┴┴ ┴└─┘┴└─\n    // If configured to do so, start auto-connecting after the first cycle of the event loop\n    // has completed (to allow time for this behavior to be configured/disabled\n    // by specifying properties on `io.sails`)\n\n    // Indicate that the autoConnect timer has started.\n    io.socket._mightBeAboutToAutoConnect = true;\n    setTimeout(function () {\n      // Indicate that the autoConect timer fired.\n      io.socket._mightBeAboutToAutoConnect = false;\n\n      // If autoConnect is disabled, delete the eager socket (io.socket) and bail out.\n      if (io.sails.autoConnect === false || io.sails.autoconnect === false) {\n        delete io.socket;\n        return;\n      }\n\n      // consolog('Eagerly auto-connecting socket to Sails... (requests will be queued in the mean-time)');\n      io.socket._connect();\n    }, 0); // </setTimeout>\n\n    // Return the `io` object.\n    return io;\n  } //</SailsIOClient>\n\n  //\n  /////////////////////////////////////////////////////////////////////////////////\n  ///// </bunches of private function definitions, constructors, and methods>\n  /////////////////////////////////////////////////////////////////////////////////\n\n  //  ███████╗██╗  ██╗██████╗  ██████╗ ███████╗███████╗    ███████╗██████╗ ██╗  ██╗\n  //  ██╔════╝╚██╗██╔╝██╔══██╗██╔═══██╗██╔════╝██╔════╝    ██╔════╝██╔══██╗██║ ██╔╝\n  //  █████╗   ╚███╔╝ ██████╔╝██║   ██║███████╗█████╗      ███████╗██║  ██║█████╔╝\n  //  ██╔══╝   ██╔██╗ ██╔═══╝ ██║   ██║╚════██║██╔══╝      ╚════██║██║  ██║██╔═██╗\n  //  ███████╗██╔╝ ██╗██║     ╚██████╔╝███████║███████╗    ███████║██████╔╝██║  ██╗\n  //  ╚══════╝╚═╝  ╚═╝╚═╝      ╚═════╝ ╚══════╝╚══════╝    ╚══════╝╚═════╝ ╚═╝  ╚═╝\n  //\n\n  // Add CommonJS support to allow this client SDK to be used from Node.js.\n  if (SDK_INFO.platform === 'node') {\n    module.exports = SailsIOClient;\n  }\n  // Add AMD support, registering this client SDK as an anonymous module.\n  else if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return SailsIOClient;\n    });\n  } else {\n    // Otherwise, try to instantiate the client using the global `io`:\n    SailsIOClient();\n\n    // Note:\n    // If you are modifying this file manually to wrap an existing socket.io client\n    // (e.g. to prevent pollution of the global namespace), you can replace the global\n    // `io` with your own `io` instance above.\n  }\n})();","map":{"version":3,"names":["SOCKET_OPTIONS","CONFIGURABLE_VIA_HTML_ATTR","CONNECTION_METADATA_PARAMS","version","platform","language","SDK_INFO","module","exports","versionString","thisScriptTag","window","document","getElementsByTagName","allScriptsCurrentlyInDOM","length","urlThisScriptWasFetchedFrom","scriptTagConfig","src","forEach","configKey","htmlAttrVal","getAttribute","JSON","parse","e","undefined","Error","autoConnect","environment","headers","Array","isArray","url","_existingGlobalSocketIO","io","SailsIOClient","_providedSocketIO","sails","LoggerFactory","options","prefix","console","log","bind","noop","args","prototype","slice","call","arguments","PREFIX","unshift","apply","consolog","noPrefix","runRequestQueue","socket","queue","requestQueue","i","isSafeToDereference","hasOwnProperty","requestArgs","request","jsonp","opts","cb","scriptEl","createElement","_sailsIoJSConnect","response","parentNode","removeChild","appendChild","JWR","responseCtx","body","statusCode","msg","stringify","error","toString","toPOJO","pipe","_emitFrom","requestCtx","_raw","sailsEndpoint","method","emit","serverResponded","calledCb","_responseCbs","splice","indexOf","_requestCtxs","SailsSocket","self","_isConnecting","_mightBeAboutToAutoConnect","_opts","option","Object","defineProperty","get","uri","set","value","isConnected","strict","reconnecting","skipReconnect","eventQueue","on","err","_connect","extraHeaders","initialConnectionHeaders","transportOptions","transports","transport","warn","replace","query","isXOrigin","location","targetProtocol","match","toLowerCase","isTargetSSL","targetPort","targetAfterProtocol","protocol","hasSameHostname","search","hostname","isLocationSSL","locationPort","port","selfInvoking","useCORSRouteToGetCookie","xOriginCookieURL","goAheadAndActuallyConnect","engine","connectionErrorTimestamp","Date","getTime","replay","socketConnected","sdk","connectionLostTimestamp","responseCbs","concat","requestCtxs","responseCb","numAttempts","msSinceLastOffline","numSecsOffline","failedToConnect","reconnect","disconnect","connected","isConnecting","mightBeAboutToAutoConnect","evName","once","fn","push","off","removeAllListeners","data","params","post","put","patch","usage","header","_request","reconnection","SAILS_LOCALS","_environment","connect","setTimeout","autoconnect","define","amd"],"sources":["C:/Users/admin/Desktop/8stars-task1/frontend/node_modules/sails.io.js/sails.io.js"],"sourcesContent":["//////////////////////////////////////////////////////////////////////////////////////\n //                                                                                //\n //  ███████╗ █████╗ ██╗██╗     ███████╗   ██╗ ██████╗         ██╗███████╗         //\n //  ██╔════╝██╔══██╗██║██║     ██╔════╝   ██║██╔═══██╗        ██║██╔════╝         //\n //  ███████╗███████║██║██║     ███████╗   ██║██║   ██║        ██║███████╗         //\n //  ╚════██║██╔══██║██║██║     ╚════██║   ██║██║   ██║   ██   ██║╚════██║         //\n //  ███████║██║  ██║██║███████╗███████║██╗██║╚██████╔╝██╗╚█████╔╝███████║         //\n //  ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝╚═╝╚═╝ ╚═════╝ ╚═╝ ╚════╝ ╚══════╝         //\n //                                                                                //\n //   ╦╔═╗╦  ╦╔═╗╔═╗╔═╗╦═╗╦╔═╗╔╦╗  ╔═╗╦  ╦╔═╗╔╗╔╔╦╗  ╔═╗╔╦╗╦╔═                     //\n //   ║╠═╣╚╗╔╝╠═╣╚═╗║  ╠╦╝║╠═╝ ║   ║  ║  ║║╣ ║║║ ║   ╚═╗ ║║╠╩╗                     //\n //  ╚╝╩ ╩ ╚╝ ╩ ╩╚═╝╚═╝╩╚═╩╩   ╩   ╚═╝╩═╝╩╚═╝╝╚╝ ╩   ╚═╝═╩╝╩ ╩                     //\n //  ┌─┐┌─┐┬─┐  ┌┐┌┌─┐┌┬┐┌─┐  ┬┌─┐  ┌─┐┌┐┌┌┬┐  ┌┬┐┬ ┬┌─┐  ┌┐ ┬─┐┌─┐┬ ┬┌─┐┌─┐┬─┐    //\n //  ├┤ │ │├┬┘  ││││ │ ││├┤   │└─┐  ├─┤│││ ││   │ ├─┤├┤   ├┴┐├┬┘│ ││││└─┐├┤ ├┬┘    //\n //  └  └─┘┴└─  ┘└┘└─┘─┴┘└─┘o└┘└─┘  ┴ ┴┘└┘─┴┘   ┴ ┴ ┴└─┘  └─┘┴└─└─┘└┴┘└─┘└─┘┴└─    //\n //                                                                                //\n//////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * sails.io.js\n * ------------------------------------------------------------------------\n * JavaScript Client (SDK) for communicating with Sails.\n *\n * Note that this script is completely optional, but it is handy if you're\n * using WebSockets from the browser to talk to your Sails server.\n *\n * For tips and documentation, visit:\n * http://sailsjs.com/documentation/reference/web-sockets/socket-client\n * ------------------------------------------------------------------------\n *\n * This file allows you to send and receive socket.io messages to & from Sails\n * by simulating a REST client interface on top of socket.io. It models its API\n * after the $.ajax pattern from jQuery you might already be familiar with.\n *\n * So if you're switching from using AJAX to sockets, instead of:\n *    `$.post( url, [data], [cb] )`\n *\n * You would use:\n *    `socket.post( url, [data], [cb] )`\n */\n\n\n(function() {\n\n\n  //   ██████╗ ██████╗ ███╗   ██╗███████╗████████╗ █████╗ ███╗   ██╗████████╗███████╗\n  //  ██╔════╝██╔═══██╗████╗  ██║██╔════╝╚══██╔══╝██╔══██╗████╗  ██║╚══██╔══╝██╔════╝\n  //  ██║     ██║   ██║██╔██╗ ██║███████╗   ██║   ███████║██╔██╗ ██║   ██║   ███████╗\n  //  ██║     ██║   ██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║╚██╗██║   ██║   ╚════██║\n  //  ╚██████╗╚██████╔╝██║ ╚████║███████║   ██║   ██║  ██║██║ ╚████║   ██║   ███████║\n  //   ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝\n  //\n\n\n  /**\n   * Constant containing the names of all available options\n   * for individual sockets.\n   *\n   * @type {Array}\n   */\n  var SOCKET_OPTIONS = [\n    'useCORSRouteToGetCookie',\n    'url',\n    'multiplex',\n    'transports',\n    'query',\n    'path',\n    'headers',\n    'initialConnectionHeaders',\n    'reconnection',\n    'reconnectionAttempts',\n    'reconnectionDelay',\n    'reconnectionDelayMax',\n    'rejectUnauthorized',\n    'randomizationFactor',\n    'timeout'\n  ];\n\n\n  /**\n   * Constant containing the names of properties on `io.sails` which\n   * may be configured using HTML attributes on the script tag which\n   * loaded this file.\n   *\n   * @type {Array}\n   *\n   * (this is unused if loading from node.js)\n   */\n  var CONFIGURABLE_VIA_HTML_ATTR = [\n    'autoConnect',\n    'reconnection',\n    'environment',\n    'headers',\n    'url',\n    'transports',\n    'path'\n  ];\n\n\n\n\n  /**\n   * Constant containing the names of querystring\n   * parameters sent when connecting any SailsSocket.\n   *\n   * @type {Dictionary}\n   */\n  var CONNECTION_METADATA_PARAMS = {\n    version: '__sails_io_sdk_version',\n    platform: '__sails_io_sdk_platform',\n    language: '__sails_io_sdk_language'\n  };\n\n\n  /**\n   * Constant containing metadata about the platform, language, and\n   * current version of this SDK.\n   *\n   * @type {Dictionary}\n   */\n  var SDK_INFO = {\n    version: '1.2.1', // <-- pulled automatically from package.json, do not change!\n    language: 'javascript',\n    platform: (function (){\n      if (typeof module === 'object' && typeof module.exports !== 'undefined') {\n        return 'node';\n      }\n      else {\n        return 'browser';\n      }\n    })()\n  };\n\n  // Build `versionString` (a querystring snippet) by\n  // combining SDK_INFO and CONNECTION_METADATA_PARAMS.\n  SDK_INFO.versionString =\n    CONNECTION_METADATA_PARAMS.version + '=' + SDK_INFO.version + '&' +\n    CONNECTION_METADATA_PARAMS.platform + '=' + SDK_INFO.platform + '&' +\n    CONNECTION_METADATA_PARAMS.language + '=' + SDK_INFO.language;\n\n\n\n\n  //   █████╗ ██████╗ ███████╗ ██████╗ ██████╗ ██████╗     ██╗  ██╗████████╗███╗   ███╗██╗\n  //  ██╔══██╗██╔══██╗██╔════╝██╔═══██╗██╔══██╗██╔══██╗    ██║  ██║╚══██╔══╝████╗ ████║██║\n  //  ███████║██████╔╝███████╗██║   ██║██████╔╝██████╔╝    ███████║   ██║   ██╔████╔██║██║\n  //  ██╔══██║██╔══██╗╚════██║██║   ██║██╔══██╗██╔══██╗    ██╔══██║   ██║   ██║╚██╔╝██║██║\n  //  ██║  ██║██████╔╝███████║╚██████╔╝██║  ██║██████╔╝    ██║  ██║   ██║   ██║ ╚═╝ ██║███████╗\n  //  ╚═╝  ╚═╝╚═════╝ ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝     ╚═╝  ╚═╝   ╚═╝   ╚═╝     ╚═╝╚══════╝\n  //\n  //   █████╗ ████████╗████████╗██████╗ ██╗██████╗ ██╗   ██╗████████╗███████╗███████╗\n  //  ██╔══██╗╚══██╔══╝╚══██╔══╝██╔══██╗██║██╔══██╗██║   ██║╚══██╔══╝██╔════╝██╔════╝\n  //  ███████║   ██║      ██║   ██████╔╝██║██████╔╝██║   ██║   ██║   █████╗  ███████╗\n  //  ██╔══██║   ██║      ██║   ██╔══██╗██║██╔══██╗██║   ██║   ██║   ██╔══╝  ╚════██║\n  //  ██║  ██║   ██║      ██║   ██║  ██║██║██████╔╝╚██████╔╝   ██║   ███████╗███████║\n  //  ╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚═╝  ╚═╝╚═╝╚═════╝  ╚═════╝    ╚═╝   ╚══════╝╚══════╝\n  //\n  //  ███████╗██████╗  ██████╗ ███╗   ███╗      ██╗███████╗ ██████╗██████╗ ██╗██████╗ ████████╗██╗\n  //  ██╔════╝██╔══██╗██╔═══██╗████╗ ████║     ██╔╝██╔════╝██╔════╝██╔══██╗██║██╔══██╗╚══██╔══╝╚██╗\n  //  █████╗  ██████╔╝██║   ██║██╔████╔██║    ██╔╝ ███████╗██║     ██████╔╝██║██████╔╝   ██║    ╚██╗\n  //  ██╔══╝  ██╔══██╗██║   ██║██║╚██╔╝██║    ╚██╗ ╚════██║██║     ██╔══██╗██║██╔═══╝    ██║    ██╔╝\n  //  ██║     ██║  ██║╚██████╔╝██║ ╚═╝ ██║     ╚██╗███████║╚██████╗██║  ██║██║██║        ██║   ██╔╝\n  //  ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝      ╚═╝╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝╚═╝        ╚═╝   ╚═╝\n  //\n  //\n  // If available, grab the DOM element for the script tag which imported this file.\n  // (skip this if this SDK is being used outside of the DOM, i.e. in a Node process)\n  //\n  // This is used below to parse client-side sails.io.js configuration encoded as\n  // HTML attributes, as well as grabbing hold of the URL from whence the SDK was fetched.\n  var thisScriptTag = (function() {\n    if (\n      typeof window !== 'object' ||\n      typeof window.document !== 'object' ||\n      typeof window.document.getElementsByTagName !== 'function'\n    ) {\n      return null;\n    }\n\n    // Return the URL of the last script loaded (i.e. this one)\n    // (this must run before nextTick; see http://stackoverflow.com/a/2976714/486547)\n    var allScriptsCurrentlyInDOM = window.document.getElementsByTagName('script');\n    return allScriptsCurrentlyInDOM[allScriptsCurrentlyInDOM.length - 1];\n  })();\n\n\n  // Variables to contain src URL and other script tag config (for use below).\n  var urlThisScriptWasFetchedFrom = '';\n  var scriptTagConfig = {};\n\n\n  if (thisScriptTag) {\n    // Save the URL that this script was fetched from.\n    urlThisScriptWasFetchedFrom = thisScriptTag.src;\n\n    // Now parse the most common client-side configuration settings\n    // from the script tag where they may be encoded as HTML attributes.\n    //\n    // Any configuration which may be provided as an HTML attribute may\n    // also be provided prefixed with `data-`.  This is for folks who\n    // need to support browsers that have issues with nonstandard\n    // HTML attributes (or if the idea of using nonstandard HTML attributes\n    // just creeps you out)\n    //\n    // If a `data-` prefixed attr is provided, it takes precedence.\n    // (this is so that if you are already using one of these HTML\n    //  attrs for some reason, you can keep it as-is and override\n    //  it using `data-`. If you are using the `data-` prefixed version\n    //  for some other purpose... well, in that case you'll just have to\n    //  configure programmatically using `io.sails` instead.)\n    CONFIGURABLE_VIA_HTML_ATTR.forEach(function (configKey){\n\n      scriptTagConfig[configKey] = (function (){\n\n        // Support 'data-' prefixed or normal attributes.\n        // (prefixed versions take precedence if provided)\n        var htmlAttrVal = thisScriptTag.getAttribute( 'data-'+configKey );\n        if (!htmlAttrVal) {\n          htmlAttrVal = thisScriptTag.getAttribute( configKey );\n        }\n\n        // The HTML attribute value should always be a string or `null`.\n        // We'll try to parse it as JSON and use that, but worst case fall back\n        // to the default situation of it being a string.\n        if (typeof htmlAttrVal === 'string') {\n          try { return JSON.parse(htmlAttrVal); } catch (e) { return htmlAttrVal; }\n        }\n        // If `null` was returned from getAttribute(), it means that the HTML attribute\n        // was not specified, so we treat it as undefined (which will cause the property\n        // to be removed below)\n        else if (htmlAttrVal === null) {\n          return undefined;\n        }\n        // Any other contingency shouldn't be possible:\n        // - if no quotes are used in the HTML attribute, it still comes in as a string.\n        // - if no RHS is provided for the attribute, it still comes in as \"\" (empty string)\n        // (but we still handle this with an explicit error just in case--for debugging and support purposes)\n        else throw new Error('sails.io.js :: Unexpected/invalid script tag configuration for `'+configKey+'`: `'+htmlAttrVal+'` (a `'+typeof htmlAttrVal+'`). Should be a string.');\n      })();\n\n      if (scriptTagConfig[configKey] === undefined){\n        delete scriptTagConfig[configKey];\n      }\n    });\n\n\n\n    // Now that they've been parsed, do an extremely lean version of\n    // logical type validation/coercion of provided values.\n    //////////////////////////////////////////////////////////////////\n\n    // `autoConnect`\n    if (typeof scriptTagConfig.autoConnect !== 'undefined') {\n      if (scriptTagConfig.autoConnect === '') {\n        // Special case for empty string.  It means `true` (see above).\n        scriptTagConfig.autoConnect = true;\n      }\n      else if (typeof scriptTagConfig.autoConnect !== 'boolean') {\n        throw new Error('sails.io.js :: Unexpected/invalid configuration for `autoConnect` provided in script tag: `'+scriptTagConfig.autoConnect+'` (a `'+typeof scriptTagConfig.autoConnect+'`). Should be a boolean.');\n      }\n    }\n\n\n    // `environment`\n    if (typeof scriptTagConfig.environment !== 'undefined') {\n      if (typeof scriptTagConfig.environment !== 'string') {\n        throw new Error('sails.io.js :: Unexpected/invalid configuration for `environment` provided in script tag: `'+scriptTagConfig.environment+'` (a `'+typeof scriptTagConfig.environment+'`). Should be a string.');\n      }\n    }\n\n\n    // `headers`\n    if (typeof scriptTagConfig.headers !== 'undefined') {\n      if (typeof scriptTagConfig.headers !== 'object' || Array.isArray(scriptTagConfig.headers)) {\n        throw new Error('sails.io.js :: Unexpected/invalid configuration for `headers` provided in script tag: `'+scriptTagConfig.headers+'` (a `'+typeof scriptTagConfig.headers+'`). Should be a JSON-compatible dictionary (i.e. `{}`).  Don\\'t forget those double quotes (\"\"), even on key names!  Use single quotes (\\'\\') to wrap the HTML attribute value; e.g. `headers=\\'{\"X-Auth\": \"foo\"}\\'`');\n      }\n    }\n\n\n    // `url`\n    if (typeof scriptTagConfig.url !== 'undefined') {\n      if (typeof scriptTagConfig.url !== 'string') {\n        throw new Error('sails.io.js :: Unexpected/invalid configuration for `url` provided in script tag: `'+scriptTagConfig.url+'` (a `'+typeof scriptTagConfig.url+'`). Should be a string.');\n      }\n    }\n\n    // OTHER `io.sails` options are NOT CURRENTLY SUPPORTED VIA HTML ATTRIBUTES.\n  }\n\n\n\n\n  // Grab a reference to the global socket.io client (if one is available).\n  // This is used via closure below to determine which `io` to use when the\n  // socket.io client instance (`io`) is augmented to become the Sails client\n  // SDK instance (still `io`).\n  var _existingGlobalSocketIO = (typeof io !== 'undefined') ? io : undefined;\n\n\n\n\n  //////////////////////////////////////////////////////////////\n  /////\n  ///// NOW FOR BUNCHES OF:\n  /////  - PRIVATE FUNCTION DEFINITIONS\n  /////  - CONSTRUCTORS\n  /////  - AND METHODS\n  /////\n  //////////////////////////////////////////////////////////////\n  //\n\n\n\n  //  ███████╗ █████╗ ██╗██╗     ███████╗      ██╗ ██████╗        ██████╗██╗     ██╗███████╗███╗   ██╗████████╗\n  //  ██╔════╝██╔══██╗██║██║     ██╔════╝      ██║██╔═══██╗      ██╔════╝██║     ██║██╔════╝████╗  ██║╚══██╔══╝\n  //  ███████╗███████║██║██║     ███████╗█████╗██║██║   ██║█████╗██║     ██║     ██║█████╗  ██╔██╗ ██║   ██║\n  //  ╚════██║██╔══██║██║██║     ╚════██║╚════╝██║██║   ██║╚════╝██║     ██║     ██║██╔══╝  ██║╚██╗██║   ██║\n  //  ███████║██║  ██║██║███████╗███████║      ██║╚██████╔╝      ╚██████╗███████╗██║███████╗██║ ╚████║   ██║\n  //  ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝      ╚═╝ ╚═════╝        ╚═════╝╚══════╝╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝\n  //\n\n  /**\n   * SailsIOClient()\n   *\n   * Augment the provided Socket.io client object (`io`) with methods for\n   * talking and listening to one or more Sails backend(s).  If no `io` was\n   * provided (i.e. in a browser setting), then attempt to use the global.\n   *\n   * This absorbs implicit `io.sails` configuration, sets a timer for\n   * automatically connecting a socket (if `io.sails.autoConnect` is enabled)\n   * and returns the augmented `io`.\n   *\n   * Note:\n   * The automatically-connected socket is exposed as `io.socket`.  If this\n   * socket attempts to bind event listeners or send requests before it is\n   * connected, it will be queued up and replayed when the connection is\n   * successfully opened.\n   *\n   * @param {SocketIO} io\n   * @returns {SailsIOClient} [also called `io`]\n   */\n\n  function SailsIOClient(_providedSocketIO) {\n\n    // First, determine which `io` we're augmenting.\n    //\n    // Prefer the passed-in `io` instance, but fall back to the\n    // global one if we've got it.\n    var io;\n    if (_providedSocketIO) {\n      io = _providedSocketIO;\n    }\n    else {\n      io = _existingGlobalSocketIO;\n    }\n    // (note that for readability, we deliberately do not short circuit or use the tertiary operator above)\n\n\n    // If a socket.io client (`io`) is not available, none of this will work.\n    if (!io) {\n      // If node:\n      if (SDK_INFO.platform === 'node') {\n        throw new Error('No socket.io client available.  When requiring `sails.io.js` from Node.js, a socket.io client (`io`) must be passed in; e.g.:\\n```\\nvar io = require(\\'sails.io.js\\')( require(\\'socket.io-client\\') )\\n```\\n(see https://github.com/balderdashy/sails.io.js/tree/master/test for more examples)');\n      }\n      // Otherwise, this is a web browser:\n      else {\n        throw new Error('The Sails socket SDK depends on the socket.io client, but the socket.io global (`io`) was not available when `sails.io.js` loaded.  Normally, the socket.io client code is bundled with sails.io.js, so something is a little off.  Please check to be sure this version of `sails.io.js` has the minified Socket.io client at the top of the file.');\n      }\n    }\n\n    // If the chosen socket.io client (`io`) has ALREADY BEEN AUGMENTED by this SDK,\n    // (i.e. if it already has a `.sails` property) then throw an error.\n    if (io.sails) {\n      // If node:\n      if (SDK_INFO.platform === 'node') {\n        throw new Error('The provided socket.io client (`io`) has already been augmented into a Sails socket SDK instance (it has `io.sails`).');\n      }\n      // Otherwise, this is a web browser:\n      else {\n        throw new Error('The socket.io client (`io`) has already been augmented into a Sails socket SDK instance.  Usually, this means you are bringing `sails.io.js` onto the page more than once.');\n      }\n    }\n\n\n    /**\n     * A little logger for this library to use internally.\n     * Basically just a wrapper around `console.log` with\n     * support for feature-detection.\n     *\n     * @api private\n     * @factory\n     */\n    function LoggerFactory(options) {\n      options = options || {\n        prefix: true\n      };\n\n      // If `console.log` is not accessible, `log` is a noop.\n      if (\n        typeof console !== 'object' ||\n        typeof console.log !== 'function' ||\n        typeof console.log.bind !== 'function'\n      ) {\n        return function noop() {};\n      }\n\n      return function log() {\n        var args = Array.prototype.slice.call(arguments);\n\n        // All logs are disabled when `io.sails.environment = 'production'`.\n        if (io.sails.environment === 'production') return;\n\n        // Add prefix to log messages (unless disabled)\n        var PREFIX = '';\n        if (options.prefix) {\n          args.unshift(PREFIX);\n        }\n\n        // Call wrapped logger\n        console.log\n          .bind(console)\n          .apply(this, args);\n      };\n    }//</LoggerFactory>\n\n    // Create a private logger instance\n    var consolog = LoggerFactory();\n    consolog.noPrefix = LoggerFactory({\n      prefix: false\n    });\n\n\n\n    /**\n     * What is the `requestQueue`?\n     *\n     * The request queue is used to simplify app-level connection logic--\n     * i.e. so you don't have to wait for the socket to be connected\n     * to start trying to  synchronize data.\n     *\n     * @api private\n     * @param  {SailsSocket}  socket\n     */\n\n    function runRequestQueue (socket) {\n      var queue = socket.requestQueue;\n\n      if (!queue) return;\n      for (var i in queue) {\n\n        // Double-check that `queue[i]` will not\n        // inadvertently discover extra properties attached to the Object\n        // and/or Array prototype by other libraries/frameworks/tools.\n        // (e.g. Ember does this. See https://github.com/balderdashy/sails.io.js/pull/5)\n        var isSafeToDereference = ({}).hasOwnProperty.call(queue, i);\n        if (isSafeToDereference) {\n          // Get the arguments that were originally made to the \"request\" method\n          var requestArgs = queue[i];\n          // Call the request method again in the context of the socket, with the original args\n          socket.request.apply(socket, requestArgs);\n        }\n      }\n\n      // Now empty the queue to remove it as a source of additional complexity.\n      socket.requestQueue = null;\n    }\n\n\n\n    /**\n     * Send a JSONP request.\n     *\n     * @param  {Object}   opts [optional]\n     * @param  {Function} cb\n     * @return {XMLHttpRequest}\n     */\n\n    function jsonp(opts, cb) {\n      opts = opts || {};\n\n      if (typeof window === 'undefined') {\n        // FUTURE: refactor node usage to live in here\n        return cb();\n      }\n\n      var scriptEl = document.createElement('script');\n      window._sailsIoJSConnect = function(response) {\n        // In rare circumstances our script may have been vaporised.\n        // Remove it, but only if it still exists\n        // https://github.com/balderdashy/sails.io.js/issues/92\n        if (scriptEl && scriptEl.parentNode) {\n            scriptEl.parentNode.removeChild(scriptEl);\n        }\n\n        cb(response);\n      };\n      scriptEl.src = opts.url;\n      document.getElementsByTagName('head')[0].appendChild(scriptEl);\n\n    }\n\n\n\n\n    //       ██╗███████╗ ██████╗ ███╗   ██╗      ██╗    ██╗███████╗██████╗ ███████╗ ██████╗  ██████╗██╗  ██╗███████╗████████╗\n    //       ██║██╔════╝██╔═══██╗████╗  ██║      ██║    ██║██╔════╝██╔══██╗██╔════╝██╔═══██╗██╔════╝██║ ██╔╝██╔════╝╚══██╔══╝\n    //       ██║███████╗██║   ██║██╔██╗ ██║█████╗██║ █╗ ██║█████╗  ██████╔╝███████╗██║   ██║██║     █████╔╝ █████╗     ██║\n    //  ██   ██║╚════██║██║   ██║██║╚██╗██║╚════╝██║███╗██║██╔══╝  ██╔══██╗╚════██║██║   ██║██║     ██╔═██╗ ██╔══╝     ██║\n    //  ╚█████╔╝███████║╚██████╔╝██║ ╚████║      ╚███╔███╔╝███████╗██████╔╝███████║╚██████╔╝╚██████╗██║  ██╗███████╗   ██║\n    //   ╚════╝ ╚══════╝ ╚═════╝ ╚═╝  ╚═══╝       ╚══╝╚══╝ ╚══════╝╚═════╝ ╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝\n    //\n    //  ██████╗ ███████╗███████╗██████╗  ██████╗ ███╗   ██╗███████╗███████╗     ██╗     ██╗██╗    ██╗██████╗ ██╗\n    //  ██╔══██╗██╔════╝██╔════╝██╔══██╗██╔═══██╗████╗  ██║██╔════╝██╔════╝    ██╔╝     ██║██║    ██║██╔══██╗╚██╗\n    //  ██████╔╝█████╗  ███████╗██████╔╝██║   ██║██╔██╗ ██║███████╗█████╗      ██║      ██║██║ █╗ ██║██████╔╝ ██║\n    //  ██╔══██╗██╔══╝  ╚════██║██╔═══╝ ██║   ██║██║╚██╗██║╚════██║██╔══╝      ██║ ██   ██║██║███╗██║██╔══██╗ ██║\n    //  ██║  ██║███████╗███████║██║     ╚██████╔╝██║ ╚████║███████║███████╗    ╚██╗╚█████╔╝╚███╔███╔╝██║  ██║██╔╝\n    //  ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝      ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚══════╝     ╚═╝ ╚════╝  ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝\n    //\n\n    /**\n     * The JWR (JSON WebSocket Response) received from a Sails server.\n     *\n     * @api public\n     * @param  {Object}  responseCtx\n     *         => :body\n     *         => :statusCode\n     *         => :headers\n     *\n     * @constructor\n     */\n\n    function JWR(responseCtx) {\n      this.body = responseCtx.body;\n      this.headers = responseCtx.headers || {};\n      this.statusCode = (typeof responseCtx.statusCode === 'undefined') ? 200 : responseCtx.statusCode;\n      // FUTURE: Replace this typeof short-circuit with an assertion (statusCode should always be set)\n\n      if (this.statusCode < 200 || this.statusCode >= 400) {\n        // Determine the appropriate error message.\n        var msg;\n        if (this.statusCode === 0) {\n          msg = 'The socket request failed.';\n        }\n        else {\n          msg = 'Server responded with a ' + this.statusCode + ' status code';\n          msg += ':\\n```\\n' + JSON.stringify(this.body, null, 2) + '\\n```';\n          // (^^Note that we should always be able to rely on socket.io to give us\n          // non-circular data here, so we don't have to worry about wrapping the\n          // above in a try...catch)\n        }\n\n        // Now build and attach Error instance.\n        this.error = new Error(msg);\n      }\n    }\n    JWR.prototype.toString = function() {\n      return '[ResponseFromSails]' + '  -- ' +\n        'Status: ' + this.statusCode + '  -- ' +\n        'Headers: ' + this.headers + '  -- ' +\n        'Body: ' + this.body;\n    };\n    JWR.prototype.toPOJO = function() {\n      return {\n        body: this.body,\n        headers: this.headers,\n        statusCode: this.statusCode\n      };\n    };\n    JWR.prototype.pipe = function() {\n      // FUTURE: look at substack's stuff\n      return new Error('Client-side streaming support not implemented yet.');\n    };\n\n\n\n\n    //          ███████╗███╗   ███╗██╗████████╗███████╗██████╗  ██████╗ ███╗   ███╗ ██╗██╗\n    //          ██╔════╝████╗ ████║██║╚══██╔══╝██╔════╝██╔══██╗██╔═══██╗████╗ ████║██╔╝╚██╗\n    //          █████╗  ██╔████╔██║██║   ██║   █████╗  ██████╔╝██║   ██║██╔████╔██║██║  ██║\n    //          ██╔══╝  ██║╚██╔╝██║██║   ██║   ██╔══╝  ██╔══██╗██║   ██║██║╚██╔╝██║██║  ██║\n    //  ███████╗███████╗██║ ╚═╝ ██║██║   ██║   ██║     ██║  ██║╚██████╔╝██║ ╚═╝ ██║╚██╗██╔╝\n    //  ╚══════╝╚══════╝╚═╝     ╚═╝╚═╝   ╚═╝   ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝ ╚═╝╚═╝\n    //\n\n    /**\n     * @api private\n     * @param  {SailsSocket} socket  [description]\n     * @param  {Object} requestCtx [description]\n     */\n\n    function _emitFrom(socket, requestCtx) {\n\n      if (!socket._raw) {\n        throw new Error('Failed to emit from socket- raw SIO socket is missing.');\n      }\n\n      // Since callback is embedded in requestCtx,\n      // retrieve it and delete the key before continuing.\n      var cb = requestCtx.cb;\n      delete requestCtx.cb;\n\n      // Name of the appropriate socket.io listener on the server\n      // ( === the request method or \"verb\", e.g. 'get', 'post', 'put', etc. )\n      var sailsEndpoint = requestCtx.method;\n\n      socket._raw.emit(sailsEndpoint, requestCtx, function serverResponded(responseCtx) {\n\n        // Send back (emulatedHTTPBody, jsonWebSocketResponse)\n        if (cb && !requestCtx.calledCb) {\n          cb(responseCtx.body, new JWR(responseCtx));\n          // Set flag indicating that callback was called, to avoid duplicate calls.\n          requestCtx.calledCb = true;\n          // Remove the callback from the list.\n          socket._responseCbs.splice(socket._responseCbs.indexOf(cb), 1);\n          // Remove the context from the list.\n          socket._requestCtxs.splice(socket._requestCtxs.indexOf(requestCtx), 1);\n        }\n      });\n    }\n\n\n\n\n\n\n\n    //  ███████╗ █████╗ ██╗██╗     ███████╗███████╗ ██████╗  ██████╗██╗  ██╗███████╗████████╗\n    //  ██╔════╝██╔══██╗██║██║     ██╔════╝██╔════╝██╔═══██╗██╔════╝██║ ██╔╝██╔════╝╚══██╔══╝\n    //  ███████╗███████║██║██║     ███████╗███████╗██║   ██║██║     █████╔╝ █████╗     ██║\n    //  ╚════██║██╔══██║██║██║     ╚════██║╚════██║██║   ██║██║     ██╔═██╗ ██╔══╝     ██║\n    //  ███████║██║  ██║██║███████╗███████║███████║╚██████╔╝╚██████╗██║  ██╗███████╗   ██║\n    //  ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝\n    //\n\n    /**\n     * SailsSocket\n     *\n     * A wrapper for an underlying Socket instance that communicates directly\n     * to the Socket.io server running inside of Sails.\n     *\n     * If no `socket` option is provied, SailsSocket will function as a mock. It will queue socket\n     * requests and event handler bindings, replaying them when the raw underlying socket actually\n     * connects. This is handy when we don't necessarily have the valid configuration to know\n     * WHICH SERVER to talk to yet, etc.  It is also used by `io.socket` for your convenience.\n     *\n     * @constructor\n     * @api private\n     *\n     * ----------------------------------------------------------------------\n     * Note: This constructor should not be used directly. To obtain a `SailsSocket`\n     * instance of your very own, run:\n     * ```\n     * var mySocket = io.sails.connect();\n     * ```\n     * ----------------------------------------------------------------------\n     */\n    function SailsSocket (opts){\n      var self = this;\n      opts = opts||{};\n\n      // Initialize private properties\n      self._isConnecting = false;\n      self._mightBeAboutToAutoConnect = false;\n\n      // Set up connection options so that they can only be changed when socket is disconnected.\n      var _opts = {};\n      SOCKET_OPTIONS.forEach(function(option) {\n        // Okay to change global headers while socket is connected\n        if (option == 'headers') {return;}\n        Object.defineProperty(self, option, {\n          get: function() {\n            if (option == 'url') {\n              return _opts[option] || (self._raw && self._raw.io && self._raw.io.uri);\n            }\n            return _opts[option];\n          },\n          set: function(value) {\n            // Don't allow value to be changed while socket is connected\n            if (self.isConnected() && io.sails.strict !== false && value != _opts[option]) {\n              throw new Error('Cannot change value of `' + option + '` while socket is connected.');\n            }\n            // If socket is attempting to reconnect, stop it.\n            if (self._raw && self._raw.io && self._raw.io.reconnecting && !self._raw.io.skipReconnect) {\n              self._raw.io.skipReconnect = true;\n              consolog('Stopping reconnect; use .reconnect() to connect socket after changing options.');\n            }\n            _opts[option] = value;\n          }\n        });\n      });\n\n      // Absorb opts into SailsSocket instance\n      // See http://sailsjs.com/documentation/reference/web-sockets/socket-client/sails-socket/properties\n      // for description of options\n      SOCKET_OPTIONS.forEach(function(option) {\n        self[option] = opts[option];\n      });\n\n      // Set up \"eventQueue\" to hold event handlers which have not been set on the actual raw socket yet.\n      self.eventQueue = {};\n\n      // Listen for special `parseError` event sent from sockets hook on the backend\n      // if an error occurs but a valid callback was not received from the client\n      // (i.e. so the server had no other way to send back the error information)\n      self.on('sails:parseError', function (err){\n        consolog('Sails encountered an error parsing a socket message sent from this client, and did not have access to a callback function to respond with.');\n        consolog('Error details:',err);\n      });\n\n      // FUTURE:\n      // Listen for a special private message on any connected that allows the server\n      // to set the environment (giving us 100% certainty that we guessed right)\n      // However, note that the `console.log`s called before and after connection\n      // are still forced to rely on our existing heuristics (to disable, tack #production\n      // onto the URL used to fetch this file.)\n\n    }//</SailsSocket>\n\n\n    /**\n     * `SailsSocket.prototype._connect()`\n     *\n     * Begin connecting this socket to the server.\n     *\n     * @api private\n     */\n    SailsSocket.prototype._connect = function (){\n      var self = this;\n\n      self._isConnecting = true;\n\n      // Apply `io.sails` config as defaults\n      // (now that at least one tick has elapsed)\n      // See http://sailsjs.com/documentation/reference/web-sockets/socket-client/sails-socket/properties\n      // for description of options and default values\n      SOCKET_OPTIONS.forEach(function(option) {\n        if ('undefined' == typeof self[option]) {\n          self[option] = io.sails[option];\n        }\n      });\n\n      // Headers that will be sent with the initial request to /socket.io (Node.js only)\n      self.extraHeaders = self.initialConnectionHeaders || {};\n\n      // For browser usage (currently works with \"polling\" transport only)\n      self.transportOptions = self.transportOptions || {};\n      self.transports.forEach(function(transport) {\n        self.transportOptions[transport] = self.transportOptions[transport] || {};\n        self.transportOptions[transport].extraHeaders = self.initialConnectionHeaders || {};\n      });\n\n      // Log a warning if non-Node.js platform attempts to use `initialConnectionHeaders` for anything other than `polling`.\n      if (self.initialConnectionHeaders && SDK_INFO.platform !== 'node' && self.transports.indexOf('polling') === -1 || self.transports.length > 1) {\n        if (typeof console === 'object' && typeof console.warn === 'function') {\n          console.warn('When running in browser, `initialConnectionHeaders` option is only available for the `polling` transport.');\n        }\n      }\n\n      // Ensure URL has no trailing slash\n      self.url = self.url ? self.url.replace(/(\\/)$/, '') : undefined;\n\n      // Mix the current SDK version into the query string in\n      // the connection request to the server:\n      if (typeof self.query === 'string') {\n        // (If provided as a string, trim leading question mark,\n        // just in case one was provided.)\n        self.query = self.query.replace(/^\\?/, '');\n        self.query += '&' + SDK_INFO.versionString;\n      }\n      else if (self.query && typeof self.query === 'object') {\n        throw new Error('`query` setting does not currently support configuration as a dictionary (`{}`).  Instead, it must be specified as a string like `foo=89&bar=hi`');\n      }\n      else if (!self.query) {\n        self.query = SDK_INFO.versionString;\n      }\n      else {\n        throw new Error('Unexpected data type provided for `query` setting: '+self.query);\n      }\n\n      // Determine whether this is a cross-origin socket by examining the\n      // hostname and port on the `window.location` object.  If it's cross-origin,\n      // we'll attempt to get a cookie for the domain so that a Sails session can\n      // be established.\n      var isXOrigin = (function (){\n\n        // If `window` doesn't exist (i.e. being used from Node.js), then\n        // we won't bother attempting to get a cookie.  If you're using sockets\n        // from Node.js and find you need to share a session between multiple\n        // socket connections, you'll need to make an HTTP request to the /__getcookie\n        // endpoint of the Sails server (or any endpoint that returns a set-cookie header)\n        // and then use the cookie value in the `initialConnectionHeaders` option to\n        // io.sails.connect()\n        if (typeof window === 'undefined' || typeof window.location === 'undefined') {\n          return false;\n        }\n\n        // If `self.url` (aka \"target\") is falsy, then we don't need to worry about it.\n        if (typeof self.url !== 'string') { return false; }\n\n        // Get information about the \"target\" (`self.url`)\n        var targetProtocol = (function (){\n          try {\n            targetProtocol = self.url.match(/^([a-z]+:\\/\\/)/i)[1].toLowerCase();\n          }\n          catch (e) {}\n          targetProtocol = targetProtocol || 'http://';\n          return targetProtocol;\n        })();\n        var isTargetSSL = !!self.url.match('^https');\n        var targetPort = (function (){\n          try {\n            return self.url.match(/^[a-z]+:\\/\\/[^:]*:([0-9]*)/i)[1];\n          }\n          catch (e){}\n          return isTargetSSL ? '443' : '80';\n        })();\n        var targetAfterProtocol = self.url.replace(/^([a-z]+:\\/\\/)/i, '');\n\n\n        // If target protocol is different than the actual protocol,\n        // then we'll consider this cross-origin.\n        if (targetProtocol.replace(/[:\\/]/g, '') !== window.location.protocol.replace(/[:\\/]/g,'')) {\n          return true;\n        }\n\n\n        // If target hostname is different than actual hostname, we'll consider this cross-origin.\n        var hasSameHostname = targetAfterProtocol.search(window.location.hostname) === 0;\n        if (!hasSameHostname) {\n          return true;\n        }\n\n        // If no actual port is explicitly set on the `window.location` object,\n        // we'll assume either 80 or 443.\n        var isLocationSSL = window.location.protocol.match(/https/i);\n        var locationPort = (window.location.port+'') || (isLocationSSL ? '443' : '80');\n\n        // Finally, if ports don't match, we'll consider this cross-origin.\n        if (targetPort !== locationPort) {\n          return true;\n        }\n\n        // Otherwise, it's the same origin.\n        return false;\n\n      })();\n\n\n      // Prepare to start connecting the socket\n      (function selfInvoking (cb){\n\n        // If this is an attempt at a cross-origin or cross-port\n        // socket connection via a browswe, send a JSONP request\n        // first to ensure that a valid cookie is available.\n        // This can be disabled by setting `io.sails.useCORSRouteToGetCookie`\n        // to false.\n        //\n        // Otherwise, skip the stuff below.\n        //\n        if (!(self.useCORSRouteToGetCookie && isXOrigin)) {\n          return cb();\n        }\n\n        // Figure out the x-origin CORS route\n        // (Sails provides a default)\n        var xOriginCookieURL = self.url;\n        if (typeof self.useCORSRouteToGetCookie === 'string') {\n          xOriginCookieURL += self.useCORSRouteToGetCookie;\n        }\n        else {\n          xOriginCookieURL += '/__getcookie';\n        }\n\n        // Make the AJAX request (CORS)\n        jsonp({\n          url: xOriginCookieURL,\n          method: 'GET'\n        }, cb);\n\n      })(function goAheadAndActuallyConnect() {\n\n        // Now that we're ready to connect, create a raw underlying Socket\n        // using Socket.io and save it as `_raw` (this will start it connecting)\n        self._raw = io(self.url, self);\n\n        // If the low-level transport throws an error _while connecting_, then set the _isConnecting flag\n        // to false (since we're no longer connecting with any chance of success anyway).\n        // Also, in this case (and in dev mode only) log a helpful message.\n        self._raw.io.engine.transport.on('error', function(err){\n          if (!self._isConnecting) { return; }\n\n          self._isConnecting = false;\n\n          // Track this timestamp for use in reconnection messages\n          // (only relevant if reconnection is enabled.)\n          self.connectionErrorTimestamp = (new Date()).getTime();\n\n          // Development-only message:\n          consolog('====================================');\n          consolog('The socket was unable to connect.');\n          consolog('The server may be offline, or the');\n          consolog('socket may have failed authorization');\n          consolog('based on its origin or other factors.');\n          consolog('You may want to check the values of');\n          consolog('`sails.config.sockets.onlyAllowOrigins`');\n          consolog('or (more rarely) `sails.config.sockets.beforeConnect`');\n          consolog('in your app.');\n          consolog('More info: https://sailsjs.com/config/sockets');\n          consolog('For help: https://sailsjs.com/support');\n          consolog('');\n          consolog('Technical details:');\n          consolog(err);\n          consolog('====================================');\n        });\n\n        // Replay event bindings from the eager socket\n        self.replay();\n\n\n        /**\n         * 'connect' event is triggered when the socket establishes a connection\n         *  successfully.\n         */\n        self.on('connect', function socketConnected() {\n          self._isConnecting = false;\n          consolog.noPrefix(\n            '\\n' +\n            '\\n' +\n            // '    |>    ' + '\\n' +\n            // '  \\\\___/  '+️\n            // '\\n'+\n             '  |>    Now connected to '+(self.url ? self.url : 'Sails')+'.' + '\\n' +\n            '\\\\___/   For help, see: http://bit.ly/2q0QDpf' + '\\n' +\n             '        (using sails.io.js '+io.sails.sdk.platform+' SDK @v'+io.sails.sdk.version+')'+ '\\n' +\n            '         Connected at: '+(new Date())+'\\n'+\n            '\\n'+\n            '\\n'+\n            // '\\n'+\n            ''\n            // ' ⚓︎ (development mode)'\n            // 'e.g. to send a GET request to Sails via WebSockets, run:'+ '\\n' +\n            // '`io.socket.get(\"/foo\", function serverRespondedWith (body, jwr) { console.log(body); })`'+ '\\n' +\n          );\n        });\n\n        self.on('disconnect', function() {\n\n          // Get a timestamp of when the disconnect was detected.\n          self.connectionLostTimestamp = (new Date()).getTime();\n\n          // Get a shallow clone of the internal array of response callbacks, in case any of the callbacks mutate it.\n          var responseCbs = [].concat(self._responseCbs || []);\n          // Wipe the internal array of response callbacks before executing them, in case a callback happens to add\n          // a new request to the queue.\n          self._responseCbs = [];\n\n          // Do the same for the internal request context list.\n          var requestCtxs = [].concat(self._requestCtxs || []);\n          self._requestCtxs = [];\n\n          // Loop through the callbacks for all in-progress requests, and call them each with an error indicating the disconnect.\n          if (responseCbs.length) {\n            responseCbs.forEach(function(responseCb) {\n              responseCb(new Error('The socket disconnected before the request completed.'), {\n                body: null,\n                statusCode: 0,\n                headers: {}\n              });\n            });\n          }\n\n          // If there is a list of request contexts, indicate that their callbacks have been\n          // called and then wipe the list.  This prevents errors in the edge case of a response\n          // somehow coming back after the socket reconnects.\n          if (requestCtxs.length) {\n            requestCtxs.forEach(function(requestCtx) {\n              requestCtx.calledCb = true;\n            });\n          }\n\n          consolog('====================================');\n          consolog('Socket was disconnected from Sails.');\n          consolog('Usually, this is due to one of the following reasons:' + '\\n' +\n            ' -> the server ' + (self.url ? self.url + ' ' : '') + 'was taken down' + '\\n' +\n            ' -> your browser lost internet connectivity');\n          consolog('====================================');\n        });\n\n        self.on('reconnecting', function(numAttempts) {\n          consolog(\n            '\\n'+\n            '        Socket is trying to reconnect to '+(self.url ? self.url : 'Sails')+'...\\n'+\n            '_-|>_-  (attempt #' + numAttempts + ')'+'\\n'+\n            '\\n'\n          );\n        });\n\n        self.on('reconnect', function(transport, numAttempts) {\n          if (!self._isConnecting) {\n            self.on('connect', runRequestQueue.bind(self, self));\n          }\n\n          var msSinceLastOffline;\n          var numSecsOffline;\n          if (self.connectionLostTimestamp){\n            msSinceLastOffline = ((new Date()).getTime() - self.connectionLostTimestamp);\n            numSecsOffline = (msSinceLastOffline / 1000);\n          }\n          else if (self.connectionErrorTimestamp) {\n            msSinceLastOffline = ((new Date()).getTime() - self.connectionErrorTimestamp);\n            numSecsOffline = (msSinceLastOffline / 1000);\n          }\n          else {\n            msSinceLastOffline = '???';\n            numSecsOffline = '???';\n          }\n\n          consolog(\n            '\\n'+\n             '  |>    Socket reconnected successfully after'+'\\n'+\n            '\\\\___/   being offline at least ' + numSecsOffline + ' seconds.'+'\\n'+\n            '\\n'\n          );\n        });\n\n        // 'error' event is triggered if connection can not be established.\n        // (usually because of a failed authorization, which is in turn\n        // usually due to a missing or invalid cookie)\n        self.on('error', function failedToConnect(err) {\n          self._isConnecting = false;\n          ////////////////////////////////////////////////////////////////////////////////////\n          // Note:\n          // In the future, we could provide a separate event for when a socket cannot connect\n          // due to a failed `beforeConnect` (aka \"authorization\" if you're old school).\n          // this could probably be implemented by emitting a special event from the server.\n          ////////////////////////////////////////////////////////////////////////////////////\n\n          consolog(\n            'Failed to connect socket (possibly due to failed `beforeConnect` on server)',\n            'Error:', err\n          );\n        });\n      });\n\n    };\n\n    /**\n     * Reconnect the underlying socket.\n     *\n     * @api public\n     */\n    SailsSocket.prototype.reconnect = function (){\n      if (this._isConnecting) {\n        throw new Error('Cannot connect- socket is already connecting');\n      }\n      if (this.isConnected()) {\n        throw new Error('Cannot connect- socket is already connected');\n      }\n      return this._connect();\n    };\n\n    /**\n     * Disconnect the underlying socket.\n     *\n     * @api public\n     */\n    SailsSocket.prototype.disconnect = function (){\n      this._isConnecting = false;\n      if (!this.isConnected()) {\n        throw new Error('Cannot disconnect- socket is already disconnected');\n      }\n      return this._raw.disconnect();\n    };\n\n\n\n    /**\n     * isConnected\n     *\n     * @return {Boolean} whether the socket is connected and able to\n     *                   communicate w/ the server.\n     */\n\n    SailsSocket.prototype.isConnected = function () {\n      if (!this._raw) {\n        return false;\n      }\n\n      return !!this._raw.connected;\n    };\n\n\n    /**\n     * isConnecting\n     *\n     * @return {Boolean} whether the socket is in the process of connecting\n     *                   to the server.\n     */\n\n    SailsSocket.prototype.isConnecting = function () {\n      return this._isConnecting;\n    };\n\n    /**\n     * isConnecting\n     *\n     * @return {Boolean} flag that is `true` after a SailsSocket instance is\n     *                   initialized but before one tick of the event loop\n     *                   has passed (so that it hasn't attempted to connect\n     *                   yet, if autoConnect ends up being configured `true`)\n     */\n    SailsSocket.prototype.mightBeAboutToAutoConnect = function() {\n      return this._mightBeAboutToAutoConnect;\n    };\n\n    /**\n     * [replay description]\n     * @return {[type]} [description]\n     */\n    SailsSocket.prototype.replay = function (){\n      var self = this;\n\n      // Pass events and a reference to the request queue\n      // off to the self._raw for consumption\n      for (var evName in self.eventQueue) {\n        for (var i in self.eventQueue[evName]) {\n          self._raw.on(evName, self.eventQueue[evName][i]);\n        }\n      }\n\n      // Bind a one-time function to run the request queue\n      // when the self._raw connects.\n      if ( !self.isConnected() ) {\n        self._raw.once('connect', runRequestQueue.bind(self, self));\n      }\n      // Or run it immediately if self._raw is already connected\n      else {\n        runRequestQueue(self);\n      }\n\n      return self;\n    };\n\n\n    /**\n     * Chainable method to bind an event to the socket.\n     *\n     * @param  {String}   evName [event name]\n     * @param  {Function} fn     [event handler function]\n     * @return {SailsSocket}\n     */\n    SailsSocket.prototype.on = function (evName, fn){\n\n      // Bind the event to the raw underlying socket if possible.\n      if (this._raw) {\n        this._raw.on(evName, fn);\n        return this;\n      }\n\n      // Otherwise queue the event binding.\n      if (!this.eventQueue[evName]) {\n        this.eventQueue[evName] = [fn];\n      }\n      else {\n        this.eventQueue[evName].push(fn);\n      }\n\n      return this;\n    };\n\n    /**\n     * Chainable method to unbind an event from the socket.\n     *\n     * @param  {String}   evName [event name]\n     * @param  {Function} fn     [event handler function]\n     * @return {SailsSocket}\n     */\n    SailsSocket.prototype.off = function (evName, fn){\n\n      // Bind the event to the raw underlying socket if possible.\n      if (this._raw) {\n        this._raw.off(evName, fn);\n        return this;\n      }\n\n      // Otherwise queue the event binding.\n      if (this.eventQueue[evName] && this.eventQueue[evName].indexOf(fn) > -1) {\n        this.eventQueue[evName].splice(this.eventQueue[evName].indexOf(fn), 1);\n      }\n\n      return this;\n    };\n\n\n    /**\n     * Chainable method to unbind all events from the socket.\n     *\n     * @return {SailsSocket}\n     */\n    SailsSocket.prototype.removeAllListeners = function (){\n\n      // Bind the event to the raw underlying socket if possible.\n      if (this._raw) {\n        this._raw.removeAllListeners();\n        return this;\n      }\n\n      // Otherwise queue the event binding.\n      this.eventQueue = {};\n\n      return this;\n    };\n\n    /**\n     * Simulate a GET request to sails\n     * e.g.\n     *    `socket.get('/user/3', Stats.populate)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype.get = function(url, data, cb) {\n\n      // `data` is optional\n      if (typeof data === 'function') {\n        cb = data;\n        data = {};\n      }\n\n      return this.request({\n        method: 'get',\n        params: data,\n        url: url\n      }, cb);\n    };\n\n\n\n    /**\n     * Simulate a POST request to sails\n     * e.g.\n     *    `socket.post('/event', newMeeting, $spinner.hide)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype.post = function(url, data, cb) {\n\n      // `data` is optional\n      if (typeof data === 'function') {\n        cb = data;\n        data = {};\n      }\n\n      return this.request({\n        method: 'post',\n        data: data,\n        url: url\n      }, cb);\n    };\n\n\n\n    /**\n     * Simulate a PUT request to sails\n     * e.g.\n     *    `socket.post('/event/3', changedFields, $spinner.hide)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype.put = function(url, data, cb) {\n\n      // `data` is optional\n      if (typeof data === 'function') {\n        cb = data;\n        data = {};\n      }\n\n      return this.request({\n        method: 'put',\n        params: data,\n        url: url\n      }, cb);\n    };\n\n\n    /**\n     * Simulate a PATCH request to sails\n     * e.g.\n     *    `socket.patch('/event/3', changedFields, $spinner.hide)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype.patch = function(url, data, cb) {\n\n      // `data` is optional\n      if (typeof data === 'function') {\n        cb = data;\n        data = {};\n      }\n\n      return this.request({\n        method: 'patch',\n        params: data,\n        url: url\n      }, cb);\n    };\n\n    /**\n     * Simulate a DELETE request to sails\n     * e.g.\n     *    `socket.delete('/event', $spinner.hide)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype['delete'] = function(url, data, cb) {\n\n      // `data` is optional\n      if (typeof data === 'function') {\n        cb = data;\n        data = {};\n      }\n\n      return this.request({\n        method: 'delete',\n        params: data,\n        url: url\n      }, cb);\n    };\n\n\n\n    /**\n     * Simulate an HTTP request to sails\n     * e.g.\n     * ```\n     * socket.request({\n     *   url:'/user',\n     *   params: {},\n     *   method: 'POST',\n     *   headers: {}\n     * }, function (responseBody, JWR) {\n     *   // ...\n     * });\n     * ```\n     *\n     * @api public\n     * @option {String} url    ::    destination URL\n     * @option {Object} params ::    parameters to send with the request [optional]\n     * @option {Object} headers::    headers to send with the request [optional]\n     * @option {Function} cb   ::    callback function to call when finished [optional]\n     * @option {String} method ::    HTTP request method [optional]\n     */\n\n    SailsSocket.prototype.request = function(options, cb) {\n\n      var usage =\n      'Usage:\\n'+\n      'socket.request( options, [fnToCallWhenComplete] )\\n\\n'+\n      'options.url :: e.g. \"/foo/bar\"'+'\\n'+\n      'options.method :: e.g. \"get\", \"post\", \"put\", or \"delete\", etc.'+'\\n'+\n      'options.params :: e.g. { emailAddress: \"mike@example.com\" }'+'\\n'+\n      'options.headers :: e.g. { \"x-my-custom-header\": \"some string\" }';\n      // Old usage:\n      // var usage = 'Usage:\\n socket.'+(options.method||'request')+'('+\n      //   ' destinationURL, [dataToSend], [fnToCallWhenComplete] )';\n\n\n      // Validate options and callback\n      if (typeof cb !== 'undefined' && typeof cb !== 'function') {\n        throw new Error('Invalid callback function!\\n' + usage);\n      }\n      if (typeof options !== 'object' || typeof options.url !== 'string') {\n        throw new Error('Invalid or missing URL!\\n' + usage);\n      }\n      if (options.method && typeof options.method !== 'string') {\n        throw new Error('Invalid `method` provided (should be a string like \"post\" or \"put\")\\n' + usage);\n      }\n      if (options.headers && typeof options.headers !== 'object') {\n        throw new Error('Invalid `headers` provided (should be a dictionary with string values)\\n' + usage);\n      }\n      if (options.params && typeof options.params !== 'object') {\n        throw new Error('Invalid `params` provided (should be a dictionary with JSON-serializable values)\\n' + usage);\n      }\n      if (options.data && typeof options.data !== 'object') {\n        throw new Error('Invalid `data` provided (should be a dictionary with JSON-serializable values)\\n' + usage);\n      }\n\n      // Accept either `params` or `data` for backwards compatibility (but not both!)\n      if (options.data && options.params) {\n        throw new Error('Cannot specify both `params` and `data`!  They are aliases of each other.\\n' + usage);\n      }\n      else if (options.data) {\n        options.params = options.data;\n        delete options.data;\n      }\n\n\n      // If this socket is not connected yet, queue up this request\n      // instead of sending it.\n      // (so it can be replayed when the socket comes online.)\n      if ( ! this.isConnected() ) {\n\n        // If no queue array exists for this socket yet, create it.\n        this.requestQueue = this.requestQueue || [];\n        this.requestQueue.push([options, cb]);\n        return;\n      }\n\n      // Otherwise, our socket is connected, so continue prepping\n      // the request.\n\n      // Default headers to an empty object\n      options.headers = options.headers || {};\n\n      // Build a simulated request object\n      // (and sanitize/marshal options along the way)\n      var requestCtx = {\n\n        method: (options.method || 'get').toLowerCase(),\n\n        headers: options.headers,\n\n        data: options.params || options.data || {},\n\n        // Remove trailing slashes and spaces to make packets smaller.\n        url: options.url.replace(/^(.+)\\/*\\s*$/, '$1'),\n\n        cb: cb\n      };\n\n      // Get a reference to the callback list, or create a new one.\n      this._responseCbs = this._responseCbs || [];\n\n      // Get a reference to the request context list, or create a new one.\n      this._requestCtxs = this._requestCtxs || [];\n\n      // Add this callback to the list.  If the socket disconnects, we'll call\n      // each cb in the list with an error and reset the list.  Otherwise the\n      // cb will be removed from the list when the server responds.\n      // Also add the request context to the list.  It will be removed once\n      // the response comes back, or if the socket disconnects.\n      if (cb) {\n        this._responseCbs.push(cb);\n        this._requestCtxs.push(requestCtx);\n      }\n\n      // Merge global headers in, if there are any.\n      if (this.headers && 'object' === typeof this.headers) {\n        for (var header in this.headers) {\n          if (!options.headers.hasOwnProperty(header)) {\n            options.headers[header] = this.headers[header];\n          }\n        }\n      }\n\n      // Send the request.\n      _emitFrom(this, requestCtx);\n    };\n\n\n\n    /**\n     * Socket.prototype._request\n     *\n     * Simulate HTTP over Socket.io.\n     *\n     * @api private\n     * @param  {[type]}   options [description]\n     * @param  {Function} cb      [description]\n     */\n    SailsSocket.prototype._request = function(options, cb) {\n      throw new Error('`_request()` was a private API deprecated as of v0.11 of the sails.io.js client. Use `.request()` instead.');\n    };\n\n\n\n\n\n\n\n    //  ██╗ ██████╗    ███████╗ █████╗ ██╗██╗     ███████╗\n    //  ██║██╔═══██╗   ██╔════╝██╔══██╗██║██║     ██╔════╝\n    //  ██║██║   ██║   ███████╗███████║██║██║     ███████╗\n    //  ██║██║   ██║   ╚════██║██╔══██║██║██║     ╚════██║\n    //  ██║╚██████╔╝██╗███████║██║  ██║██║███████╗███████║\n    //  ╚═╝ ╚═════╝ ╚═╝╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝\n    //\n    // Set an `io.sails` object that may be used for configuration before the\n    // first socket connects (i.e. to allow auto-connect behavior to be\n    // prevented by setting `io.sails.autoConnect` in an inline script\n    // directly after the script tag which loaded this file).\n\n\n    //  ┌─┐┌─┐┌┬┐  ┬ ┬┌─┐  ╔╦╗╔═╗╔═╗╔═╗╦ ╦╦ ╔╦╗╔═╗  ┌─┐┌─┐┬─┐  ┬┌─┐ ┌─┐┌─┐┬┬  ┌─┐\n    //  └─┐├┤  │   │ │├─┘   ║║║╣ ╠╣ ╠═╣║ ║║  ║ ╚═╗  ├┤ │ │├┬┘  ││ │ └─┐├─┤││  └─┐\n    //  └─┘└─┘ ┴   └─┘┴    ═╩╝╚═╝╚  ╩ ╩╚═╝╩═╝╩ ╚═╝  └  └─┘┴└─  ┴└─┘o└─┘┴ ┴┴┴─┘└─┘\n    io.sails = {\n\n      // Whether to automatically connect a socket and save it as `io.socket`.\n      autoConnect: true,\n\n      // Whether to automatically try to reconnect after connection is lost\n      reconnection: false,\n\n      // The route (path) to hit to get a x-origin (CORS) cookie\n      // (or true to use the default: '/__getcookie')\n      useCORSRouteToGetCookie: true,\n\n      // The environment we're running in.\n      // (logs are not displayed when this is set to 'production')\n      //\n      // Defaults to \"development\" unless this script was fetched from a URL\n      // that ends in `*.min.js` or '#production', or if the conventional\n      // `SAILS_LOCALS` global is set with an `_environment` of \"production\"\n      // or \"staging\".  (This setting may also be manually overridden.)\n      environment: (\n        urlThisScriptWasFetchedFrom.match(/(\\#production|\\.min\\.js)/g) ||\n        (\n          typeof window === 'object' && window &&\n          typeof window.SAILS_LOCALS === 'object' && window.SAILS_LOCALS &&\n          (window.SAILS_LOCALS._environment === 'staging' || window.SAILS_LOCALS._environment === 'production')\n        )\n      )? 'production' : 'development',\n\n      // The version of this sails.io.js client SDK\n      sdk: SDK_INFO,\n\n      // Transports to use when communicating with the server, in the order they will be tried\n      transports: ['websocket']\n    };\n\n\n\n    //  ┌─┐─┐ ┬┌┬┐┌─┐┌┐┌┌┬┐  ┬┌─┐ ┌─┐┌─┐┬┬  ┌─┐  ┌┬┐┌─┐┌─┐┌─┐┬ ┬┬ ┌┬┐┌─┐\n    //  ├┤ ┌┴┬┘ │ ├┤ │││ ││  ││ │ └─┐├─┤││  └─┐   ││├┤ ├┤ ├─┤│ ││  │ └─┐\n    //  └─┘┴ └─ ┴ └─┘┘└┘─┴┘  ┴└─┘o└─┘┴ ┴┴┴─┘└─┘  ─┴┘└─┘└  ┴ ┴└─┘┴─┘┴ └─┘\n    //  ┬ ┬┬┌┬┐┬ ┬  ┌┬┐┬ ┬┌─┐  ╦ ╦╔╦╗╔╦╗╦    ╔═╗╔╦╗╔╦╗╦═╗╦╔╗ ╦ ╦╔╦╗╔═╗╔═╗\n    //  ││││ │ ├─┤   │ ├─┤├┤   ╠═╣ ║ ║║║║    ╠═╣ ║  ║ ╠╦╝║╠╩╗║ ║ ║ ║╣ ╚═╗\n    //  └┴┘┴ ┴ ┴ ┴   ┴ ┴ ┴└─┘  ╩ ╩ ╩ ╩ ╩╩═╝  ╩ ╩ ╩  ╩ ╩╚═╩╚═╝╚═╝ ╩ ╚═╝╚═╝\n    //  ┌─┐┬─┐┌─┐┌┬┐  ┌┬┐┬ ┬┌─┐  ┌─┐┌─┐┬─┐┬┌─┐┌┬┐  ┌┬┐┌─┐┌─┐\n    //  ├┤ ├┬┘│ ││││   │ ├─┤├┤   └─┐│  ├┬┘│├─┘ │    │ ├─┤│ ┬\n    //  └  ┴└─└─┘┴ ┴   ┴ ┴ ┴└─┘  └─┘└─┘┴└─┴┴   ┴    ┴ ┴ ┴└─┘\n    //\n    // Now fold in config provided as HTML attributes on the script tag:\n    // (note that if `io.sails.*` is changed after this script, those changes\n    //  will still take precedence)\n    CONFIGURABLE_VIA_HTML_ATTR.forEach(function (configKey){\n      if (typeof scriptTagConfig[configKey] !== 'undefined') {\n        io.sails[configKey] = scriptTagConfig[configKey];\n      }\n    });\n    //////////////////////////////////////////////////////////////////////////////\n    // Note that the new HTML attribute configuration style may eventually\n    // completely replace the original approach of setting `io.sails` properties,\n    // since the new strategy is easier to reason about.  Also, it would allow us\n    // to remove the timeout below someday.\n    //////////////////////////////////////////////////////////////////////////////\n\n\n\n\n    //  ┬┌─┐ ┌─┐┌─┐┬┬  ┌─┐ ╔═╗╔═╗╔╗╔╔╗╔╔═╗╔═╗╔╦╗  /  \\\n    //  ││ │ └─┐├─┤││  └─┐ ║  ║ ║║║║║║║║╣ ║   ║  /   /\n    //  ┴└─┘o└─┘┴ ┴┴┴─┘└─┘o╚═╝╚═╝╝╚╝╝╚╝╚═╝╚═╝ ╩  \\  /\n\n    /**\n     * Add `io.sails.connect` function as a wrapper for the built-in `io()` aka `io.connect()`\n     * method, returning a SailsSocket. This special function respects the configured io.sails\n     * connection URL, as well as sending other identifying information (most importantly, the\n     * current version of this SDK).\n     *\n     * @param  {String} url  [optional]\n     * @param  {Object} opts [optional]\n     * @return {Socket}\n     */\n    io.sails.connect = function(url, opts) {\n\n      // Make URL optional\n      if ('object' === typeof url) {\n        opts = url;\n        url = null;\n      }\n\n      // Default opts to empty object\n      opts = opts || {};\n\n      // If explicit connection url is specified, save it to options\n      opts.url = url || opts.url || undefined;\n\n      // Instantiate and return a new SailsSocket- and try to connect immediately.\n      var socket = new SailsSocket(opts);\n      socket._connect();\n      return socket;\n    };\n\n\n\n\n\n\n    //  ██╗ ██████╗    ███████╗ ██████╗  ██████╗██╗  ██╗███████╗████████╗\n    //  ██║██╔═══██╗   ██╔════╝██╔═══██╗██╔════╝██║ ██╔╝██╔════╝╚══██╔══╝\n    //  ██║██║   ██║   ███████╗██║   ██║██║     █████╔╝ █████╗     ██║\n    //  ██║██║   ██║   ╚════██║██║   ██║██║     ██╔═██╗ ██╔══╝     ██║\n    //  ██║╚██████╔╝██╗███████║╚██████╔╝╚██████╗██║  ██╗███████╗   ██║\n    //  ╚═╝ ╚═════╝ ╚═╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝\n    //\n    // io.socket\n    //\n    // The eager instance of Socket which will automatically try to connect\n    // using the host that this js file was served from.\n    //\n    // This can be disabled or configured by setting properties on `io.sails.*` within the\n    // first cycle of the event loop.\n    //\n\n\n    // Build `io.socket` so it exists\n    // (note that this DOES NOT start the connection process)\n    io.socket = new SailsSocket();\n    //\n    // This socket is not connected yet, and has not even _started_ connecting.\n    //\n    // But in the mean time, this eager socket will be queue events bound by the user\n    // before the first cycle of the event loop (using `.on()`), which will later\n    // be rebound on the raw underlying socket.\n\n\n    //  ┌─┐┌─┐┌┬┐  ┌─┐┬ ┬┌┬┐┌─┐   ┌─┐┌─┐┌┐┌┌┐┌┌─┐┌─┐┌┬┐  ┌┬┐┬┌┬┐┌─┐┬─┐\n    //  └─┐├┤  │   ├─┤│ │ │ │ │───│  │ │││││││├┤ │   │    │ ││││├┤ ├┬┘\n    //  └─┘└─┘ ┴   ┴ ┴└─┘ ┴ └─┘   └─┘└─┘┘└┘┘└┘└─┘└─┘ ┴    ┴ ┴┴ ┴└─┘┴└─\n    // If configured to do so, start auto-connecting after the first cycle of the event loop\n    // has completed (to allow time for this behavior to be configured/disabled\n    // by specifying properties on `io.sails`)\n\n    // Indicate that the autoConnect timer has started.\n    io.socket._mightBeAboutToAutoConnect = true;\n\n    setTimeout(function() {\n\n      // Indicate that the autoConect timer fired.\n      io.socket._mightBeAboutToAutoConnect = false;\n\n      // If autoConnect is disabled, delete the eager socket (io.socket) and bail out.\n      if (io.sails.autoConnect === false || io.sails.autoconnect === false) {\n        delete io.socket;\n        return;\n      }\n\n      // consolog('Eagerly auto-connecting socket to Sails... (requests will be queued in the mean-time)');\n      io.socket._connect();\n\n\n    }, 0); // </setTimeout>\n\n\n    // Return the `io` object.\n    return io;\n  } //</SailsIOClient>\n\n  //\n  /////////////////////////////////////////////////////////////////////////////////\n  ///// </bunches of private function definitions, constructors, and methods>\n  /////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n  //  ███████╗██╗  ██╗██████╗  ██████╗ ███████╗███████╗    ███████╗██████╗ ██╗  ██╗\n  //  ██╔════╝╚██╗██╔╝██╔══██╗██╔═══██╗██╔════╝██╔════╝    ██╔════╝██╔══██╗██║ ██╔╝\n  //  █████╗   ╚███╔╝ ██████╔╝██║   ██║███████╗█████╗      ███████╗██║  ██║█████╔╝\n  //  ██╔══╝   ██╔██╗ ██╔═══╝ ██║   ██║╚════██║██╔══╝      ╚════██║██║  ██║██╔═██╗\n  //  ███████╗██╔╝ ██╗██║     ╚██████╔╝███████║███████╗    ███████║██████╔╝██║  ██╗\n  //  ╚══════╝╚═╝  ╚═╝╚═╝      ╚═════╝ ╚══════╝╚══════╝    ╚══════╝╚═════╝ ╚═╝  ╚═╝\n  //\n\n\n  // Add CommonJS support to allow this client SDK to be used from Node.js.\n  if (SDK_INFO.platform === 'node') {\n    module.exports = SailsIOClient;\n  }\n  // Add AMD support, registering this client SDK as an anonymous module.\n  else if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return SailsIOClient;\n    });\n  }\n  else {\n    // Otherwise, try to instantiate the client using the global `io`:\n    SailsIOClient();\n\n    // Note:\n    // If you are modifying this file manually to wrap an existing socket.io client\n    // (e.g. to prevent pollution of the global namespace), you can replace the global\n    // `io` with your own `io` instance above.\n  }\n\n})();\n"],"mappings":"AAAA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,CAAC,YAAW;EAGV;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIA,cAAc,GAAG,CACnB,yBAAyB,EACzB,KAAK,EACL,WAAW,EACX,YAAY,EACZ,OAAO,EACP,MAAM,EACN,SAAS,EACT,0BAA0B,EAC1B,cAAc,EACd,sBAAsB,EACtB,mBAAmB,EACnB,sBAAsB,EACtB,oBAAoB,EACpB,qBAAqB,EACrB,SAAS,CACV;;EAGD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIC,0BAA0B,GAAG,CAC/B,aAAa,EACb,cAAc,EACd,aAAa,EACb,SAAS,EACT,KAAK,EACL,YAAY,EACZ,MAAM,CACP;;EAKD;AACF;AACA;AACA;AACA;AACA;EACE,IAAIC,0BAA0B,GAAG;IAC/BC,OAAO,EAAE,wBAAwB;IACjCC,QAAQ,EAAE,yBAAyB;IACnCC,QAAQ,EAAE;EACZ,CAAC;;EAGD;AACF;AACA;AACA;AACA;AACA;EACE,IAAIC,QAAQ,GAAG;IACbH,OAAO,EAAE,OAAO;IAAE;IAClBE,QAAQ,EAAE,YAAY;IACtBD,QAAQ,EAAG,YAAW;MACpB,IAAI,OAAOG,MAAM,KAAK,QAAQ,IAAI,OAAOA,MAAM,CAACC,OAAO,KAAK,WAAW,EAAE;QACvE,OAAO,MAAM;MACf,CAAC,MACI;QACH,OAAO,SAAS;MAClB;IACF,CAAC;EACH,CAAC;;EAED;EACA;EACAF,QAAQ,CAACG,aAAa,GACpBP,0BAA0B,CAACC,OAAO,GAAG,GAAG,GAAGG,QAAQ,CAACH,OAAO,GAAG,GAAG,GACjED,0BAA0B,CAACE,QAAQ,GAAG,GAAG,GAAGE,QAAQ,CAACF,QAAQ,GAAG,GAAG,GACnEF,0BAA0B,CAACG,QAAQ,GAAG,GAAG,GAAGC,QAAQ,CAACD,QAAQ;;EAK/D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIK,aAAa,GAAI,YAAW;IAC9B,IACE,OAAOC,MAAM,KAAK,QAAQ,IAC1B,OAAOA,MAAM,CAACC,QAAQ,KAAK,QAAQ,IACnC,OAAOD,MAAM,CAACC,QAAQ,CAACC,oBAAoB,KAAK,UAAU,EAC1D;MACA,OAAO,IAAI;IACb;;IAEA;IACA;IACA,IAAIC,wBAAwB,GAAGH,MAAM,CAACC,QAAQ,CAACC,oBAAoB,CAAC,QAAQ,CAAC;IAC7E,OAAOC,wBAAwB,CAACA,wBAAwB,CAACC,MAAM,GAAG,CAAC,CAAC;EACtE,CAAC,EAAG;;EAGJ;EACA,IAAIC,2BAA2B,GAAG,EAAE;EACpC,IAAIC,eAAe,GAAG,CAAC,CAAC;EAGxB,IAAIP,aAAa,EAAE;IACjB;IACAM,2BAA2B,GAAGN,aAAa,CAACQ,GAAG;;IAE/C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAjB,0BAA0B,CAACkB,OAAO,CAAC,UAAUC,SAAS,EAAC;MAErDH,eAAe,CAACG,SAAS,CAAC,GAAI,YAAW;QAEvC;QACA;QACA,IAAIC,WAAW,GAAGX,aAAa,CAACY,YAAY,CAAE,OAAO,GAACF,SAAS,CAAE;QACjE,IAAI,CAACC,WAAW,EAAE;UAChBA,WAAW,GAAGX,aAAa,CAACY,YAAY,CAAEF,SAAS,CAAE;QACvD;;QAEA;QACA;QACA;QACA,IAAI,OAAOC,WAAW,KAAK,QAAQ,EAAE;UACnC,IAAI;YAAE,OAAOE,IAAI,CAACC,KAAK,CAACH,WAAW,CAAC;UAAE,CAAC,CAAC,OAAOI,CAAC,EAAE;YAAE,OAAOJ,WAAW;UAAE;QAC1E;QACA;QACA;QACA;QAAA,KACK,IAAIA,WAAW,KAAK,IAAI,EAAE;UAC7B,OAAOK,SAAS;QAClB;QACA;QACA;QACA;QACA;QAAA,KACK,MAAM,IAAIC,KAAK,CAAC,kEAAkE,GAACP,SAAS,GAAC,MAAM,GAACC,WAAW,GAAC,QAAQ,GAAC,OAAOA,WAAW,GAAC,yBAAyB,CAAC;MAC7K,CAAC,EAAG;MAEJ,IAAIJ,eAAe,CAACG,SAAS,CAAC,KAAKM,SAAS,EAAC;QAC3C,OAAOT,eAAe,CAACG,SAAS,CAAC;MACnC;IACF,CAAC,CAAC;;IAIF;IACA;IACA;;IAEA;IACA,IAAI,OAAOH,eAAe,CAACW,WAAW,KAAK,WAAW,EAAE;MACtD,IAAIX,eAAe,CAACW,WAAW,KAAK,EAAE,EAAE;QACtC;QACAX,eAAe,CAACW,WAAW,GAAG,IAAI;MACpC,CAAC,MACI,IAAI,OAAOX,eAAe,CAACW,WAAW,KAAK,SAAS,EAAE;QACzD,MAAM,IAAID,KAAK,CAAC,6FAA6F,GAACV,eAAe,CAACW,WAAW,GAAC,QAAQ,GAAC,OAAOX,eAAe,CAACW,WAAW,GAAC,0BAA0B,CAAC;MACnN;IACF;;IAGA;IACA,IAAI,OAAOX,eAAe,CAACY,WAAW,KAAK,WAAW,EAAE;MACtD,IAAI,OAAOZ,eAAe,CAACY,WAAW,KAAK,QAAQ,EAAE;QACnD,MAAM,IAAIF,KAAK,CAAC,6FAA6F,GAACV,eAAe,CAACY,WAAW,GAAC,QAAQ,GAAC,OAAOZ,eAAe,CAACY,WAAW,GAAC,yBAAyB,CAAC;MAClN;IACF;;IAGA;IACA,IAAI,OAAOZ,eAAe,CAACa,OAAO,KAAK,WAAW,EAAE;MAClD,IAAI,OAAOb,eAAe,CAACa,OAAO,KAAK,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACf,eAAe,CAACa,OAAO,CAAC,EAAE;QACzF,MAAM,IAAIH,KAAK,CAAC,yFAAyF,GAACV,eAAe,CAACa,OAAO,GAAC,QAAQ,GAAC,OAAOb,eAAe,CAACa,OAAO,GAAC,sNAAsN,CAAC;MACnY;IACF;;IAGA;IACA,IAAI,OAAOb,eAAe,CAACgB,GAAG,KAAK,WAAW,EAAE;MAC9C,IAAI,OAAOhB,eAAe,CAACgB,GAAG,KAAK,QAAQ,EAAE;QAC3C,MAAM,IAAIN,KAAK,CAAC,qFAAqF,GAACV,eAAe,CAACgB,GAAG,GAAC,QAAQ,GAAC,OAAOhB,eAAe,CAACgB,GAAG,GAAC,yBAAyB,CAAC;MAC1L;IACF;;IAEA;EACF;;EAKA;EACA;EACA;EACA;EACA,IAAIC,uBAAuB,GAAI,OAAOC,EAAE,KAAK,WAAW,GAAIA,EAAE,GAAGT,SAAS;;EAK1E;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,SAASU,aAAaA,CAACC,iBAAiB,EAAE;IAExC;IACA;IACA;IACA;IACA,IAAIF,EAAE;IACN,IAAIE,iBAAiB,EAAE;MACrBF,EAAE,GAAGE,iBAAiB;IACxB,CAAC,MACI;MACHF,EAAE,GAAGD,uBAAuB;IAC9B;IACA;;IAGA;IACA,IAAI,CAACC,EAAE,EAAE;MACP;MACA,IAAI7B,QAAQ,CAACF,QAAQ,KAAK,MAAM,EAAE;QAChC,MAAM,IAAIuB,KAAK,CAAC,kSAAkS,CAAC;MACrT;MACA;MAAA,KACK;QACH,MAAM,IAAIA,KAAK,CAAC,qVAAqV,CAAC;MACxW;IACF;;IAEA;IACA;IACA,IAAIQ,EAAE,CAACG,KAAK,EAAE;MACZ;MACA,IAAIhC,QAAQ,CAACF,QAAQ,KAAK,MAAM,EAAE;QAChC,MAAM,IAAIuB,KAAK,CAAC,uHAAuH,CAAC;MAC1I;MACA;MAAA,KACK;QACH,MAAM,IAAIA,KAAK,CAAC,4KAA4K,CAAC;MAC/L;IACF;;IAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACI,SAASY,aAAaA,CAACC,OAAO,EAAE;MAC9BA,OAAO,GAAGA,OAAO,IAAI;QACnBC,MAAM,EAAE;MACV,CAAC;;MAED;MACA,IACE,OAAOC,OAAO,KAAK,QAAQ,IAC3B,OAAOA,OAAO,CAACC,GAAG,KAAK,UAAU,IACjC,OAAOD,OAAO,CAACC,GAAG,CAACC,IAAI,KAAK,UAAU,EACtC;QACA,OAAO,SAASC,IAAIA,CAAA,EAAG,CAAC,CAAC;MAC3B;MAEA,OAAO,SAASF,GAAGA,CAAA,EAAG;QACpB,IAAIG,IAAI,GAAGf,KAAK,CAACgB,SAAS,CAACC,KAAK,CAACC,IAAI,CAACC,SAAS,CAAC;;QAEhD;QACA,IAAIf,EAAE,CAACG,KAAK,CAACT,WAAW,KAAK,YAAY,EAAE;;QAE3C;QACA,IAAIsB,MAAM,GAAG,EAAE;QACf,IAAIX,OAAO,CAACC,MAAM,EAAE;UAClBK,IAAI,CAACM,OAAO,CAACD,MAAM,CAAC;QACtB;;QAEA;QACAT,OAAO,CAACC,GAAG,CACRC,IAAI,CAACF,OAAO,CAAC,CACbW,KAAK,CAAC,IAAI,EAAEP,IAAI,CAAC;MACtB,CAAC;IACH,CAAC;;IAED;IACA,IAAIQ,QAAQ,GAAGf,aAAa,EAAE;IAC9Be,QAAQ,CAACC,QAAQ,GAAGhB,aAAa,CAAC;MAChCE,MAAM,EAAE;IACV,CAAC,CAAC;;IAIF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEI,SAASe,eAAeA,CAAEC,MAAM,EAAE;MAChC,IAAIC,KAAK,GAAGD,MAAM,CAACE,YAAY;MAE/B,IAAI,CAACD,KAAK,EAAE;MACZ,KAAK,IAAIE,CAAC,IAAIF,KAAK,EAAE;QAEnB;QACA;QACA;QACA;QACA,IAAIG,mBAAmB,GAAI,CAAC,CAAC,CAAEC,cAAc,CAACb,IAAI,CAACS,KAAK,EAAEE,CAAC,CAAC;QAC5D,IAAIC,mBAAmB,EAAE;UACvB;UACA,IAAIE,WAAW,GAAGL,KAAK,CAACE,CAAC,CAAC;UAC1B;UACAH,MAAM,CAACO,OAAO,CAACX,KAAK,CAACI,MAAM,EAAEM,WAAW,CAAC;QAC3C;MACF;;MAEA;MACAN,MAAM,CAACE,YAAY,GAAG,IAAI;IAC5B;;IAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;IAEI,SAASM,KAAKA,CAACC,IAAI,EAAEC,EAAE,EAAE;MACvBD,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;MAEjB,IAAI,OAAOvD,MAAM,KAAK,WAAW,EAAE;QACjC;QACA,OAAOwD,EAAE,EAAE;MACb;MAEA,IAAIC,QAAQ,GAAGxD,QAAQ,CAACyD,aAAa,CAAC,QAAQ,CAAC;MAC/C1D,MAAM,CAAC2D,iBAAiB,GAAG,UAASC,QAAQ,EAAE;QAC5C;QACA;QACA;QACA,IAAIH,QAAQ,IAAIA,QAAQ,CAACI,UAAU,EAAE;UACjCJ,QAAQ,CAACI,UAAU,CAACC,WAAW,CAACL,QAAQ,CAAC;QAC7C;QAEAD,EAAE,CAACI,QAAQ,CAAC;MACd,CAAC;MACDH,QAAQ,CAAClD,GAAG,GAAGgD,IAAI,CAACjC,GAAG;MACvBrB,QAAQ,CAACC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC6D,WAAW,CAACN,QAAQ,CAAC;IAEhE;;IAKA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEI,SAASO,GAAGA,CAACC,WAAW,EAAE;MACxB,IAAI,CAACC,IAAI,GAAGD,WAAW,CAACC,IAAI;MAC5B,IAAI,CAAC/C,OAAO,GAAG8C,WAAW,CAAC9C,OAAO,IAAI,CAAC,CAAC;MACxC,IAAI,CAACgD,UAAU,GAAI,OAAOF,WAAW,CAACE,UAAU,KAAK,WAAW,GAAI,GAAG,GAAGF,WAAW,CAACE,UAAU;MAChG;;MAEA,IAAI,IAAI,CAACA,UAAU,GAAG,GAAG,IAAI,IAAI,CAACA,UAAU,IAAI,GAAG,EAAE;QACnD;QACA,IAAIC,GAAG;QACP,IAAI,IAAI,CAACD,UAAU,KAAK,CAAC,EAAE;UACzBC,GAAG,GAAG,4BAA4B;QACpC,CAAC,MACI;UACHA,GAAG,GAAG,0BAA0B,GAAG,IAAI,CAACD,UAAU,GAAG,cAAc;UACnEC,GAAG,IAAI,UAAU,GAAGxD,IAAI,CAACyD,SAAS,CAAC,IAAI,CAACH,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,OAAO;UAChE;UACA;UACA;QACF;;QAEA;QACA,IAAI,CAACI,KAAK,GAAG,IAAItD,KAAK,CAACoD,GAAG,CAAC;MAC7B;IACF;IACAJ,GAAG,CAAC5B,SAAS,CAACmC,QAAQ,GAAG,YAAW;MAClC,OAAO,qBAAqB,GAAG,OAAO,GACpC,UAAU,GAAG,IAAI,CAACJ,UAAU,GAAG,OAAO,GACtC,WAAW,GAAG,IAAI,CAAChD,OAAO,GAAG,OAAO,GACpC,QAAQ,GAAG,IAAI,CAAC+C,IAAI;IACxB,CAAC;IACDF,GAAG,CAAC5B,SAAS,CAACoC,MAAM,GAAG,YAAW;MAChC,OAAO;QACLN,IAAI,EAAE,IAAI,CAACA,IAAI;QACf/C,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBgD,UAAU,EAAE,IAAI,CAACA;MACnB,CAAC;IACH,CAAC;IACDH,GAAG,CAAC5B,SAAS,CAACqC,IAAI,GAAG,YAAW;MAC9B;MACA,OAAO,IAAIzD,KAAK,CAAC,oDAAoD,CAAC;IACxE,CAAC;;IAKD;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;;IAEI,SAAS0D,SAASA,CAAC5B,MAAM,EAAE6B,UAAU,EAAE;MAErC,IAAI,CAAC7B,MAAM,CAAC8B,IAAI,EAAE;QAChB,MAAM,IAAI5D,KAAK,CAAC,wDAAwD,CAAC;MAC3E;;MAEA;MACA;MACA,IAAIwC,EAAE,GAAGmB,UAAU,CAACnB,EAAE;MACtB,OAAOmB,UAAU,CAACnB,EAAE;;MAEpB;MACA;MACA,IAAIqB,aAAa,GAAGF,UAAU,CAACG,MAAM;MAErChC,MAAM,CAAC8B,IAAI,CAACG,IAAI,CAACF,aAAa,EAAEF,UAAU,EAAE,SAASK,eAAeA,CAACf,WAAW,EAAE;QAEhF;QACA,IAAIT,EAAE,IAAI,CAACmB,UAAU,CAACM,QAAQ,EAAE;UAC9BzB,EAAE,CAACS,WAAW,CAACC,IAAI,EAAE,IAAIF,GAAG,CAACC,WAAW,CAAC,CAAC;UAC1C;UACAU,UAAU,CAACM,QAAQ,GAAG,IAAI;UAC1B;UACAnC,MAAM,CAACoC,YAAY,CAACC,MAAM,CAACrC,MAAM,CAACoC,YAAY,CAACE,OAAO,CAAC5B,EAAE,CAAC,EAAE,CAAC,CAAC;UAC9D;UACAV,MAAM,CAACuC,YAAY,CAACF,MAAM,CAACrC,MAAM,CAACuC,YAAY,CAACD,OAAO,CAACT,UAAU,CAAC,EAAE,CAAC,CAAC;QACxE;MACF,CAAC,CAAC;IACJ;;IAQA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,SAASW,WAAWA,CAAE/B,IAAI,EAAC;MACzB,IAAIgC,IAAI,GAAG,IAAI;MACfhC,IAAI,GAAGA,IAAI,IAAE,CAAC,CAAC;;MAEf;MACAgC,IAAI,CAACC,aAAa,GAAG,KAAK;MAC1BD,IAAI,CAACE,0BAA0B,GAAG,KAAK;;MAEvC;MACA,IAAIC,KAAK,GAAG,CAAC,CAAC;MACdrG,cAAc,CAACmB,OAAO,CAAC,UAASmF,MAAM,EAAE;QACtC;QACA,IAAIA,MAAM,IAAI,SAAS,EAAE;UAAC;QAAO;QACjCC,MAAM,CAACC,cAAc,CAACN,IAAI,EAAEI,MAAM,EAAE;UAClCG,GAAG,EAAE,SAAAA,CAAA,EAAW;YACd,IAAIH,MAAM,IAAI,KAAK,EAAE;cACnB,OAAOD,KAAK,CAACC,MAAM,CAAC,IAAKJ,IAAI,CAACX,IAAI,IAAIW,IAAI,CAACX,IAAI,CAACpD,EAAE,IAAI+D,IAAI,CAACX,IAAI,CAACpD,EAAE,CAACuE,GAAI;YACzE;YACA,OAAOL,KAAK,CAACC,MAAM,CAAC;UACtB,CAAC;UACDK,GAAG,EAAE,SAAAA,CAASC,KAAK,EAAE;YACnB;YACA,IAAIV,IAAI,CAACW,WAAW,EAAE,IAAI1E,EAAE,CAACG,KAAK,CAACwE,MAAM,KAAK,KAAK,IAAIF,KAAK,IAAIP,KAAK,CAACC,MAAM,CAAC,EAAE;cAC7E,MAAM,IAAI3E,KAAK,CAAC,0BAA0B,GAAG2E,MAAM,GAAG,8BAA8B,CAAC;YACvF;YACA;YACA,IAAIJ,IAAI,CAACX,IAAI,IAAIW,IAAI,CAACX,IAAI,CAACpD,EAAE,IAAI+D,IAAI,CAACX,IAAI,CAACpD,EAAE,CAAC4E,YAAY,IAAI,CAACb,IAAI,CAACX,IAAI,CAACpD,EAAE,CAAC6E,aAAa,EAAE;cACzFd,IAAI,CAACX,IAAI,CAACpD,EAAE,CAAC6E,aAAa,GAAG,IAAI;cACjC1D,QAAQ,CAAC,gFAAgF,CAAC;YAC5F;YACA+C,KAAK,CAACC,MAAM,CAAC,GAAGM,KAAK;UACvB;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;;MAEF;MACA;MACA;MACA5G,cAAc,CAACmB,OAAO,CAAC,UAASmF,MAAM,EAAE;QACtCJ,IAAI,CAACI,MAAM,CAAC,GAAGpC,IAAI,CAACoC,MAAM,CAAC;MAC7B,CAAC,CAAC;;MAEF;MACAJ,IAAI,CAACe,UAAU,GAAG,CAAC,CAAC;;MAEpB;MACA;MACA;MACAf,IAAI,CAACgB,EAAE,CAAC,kBAAkB,EAAE,UAAUC,GAAG,EAAC;QACxC7D,QAAQ,CAAC,4IAA4I,CAAC;QACtJA,QAAQ,CAAC,gBAAgB,EAAC6D,GAAG,CAAC;MAChC,CAAC,CAAC;;MAEF;MACA;MACA;MACA;MACA;MACA;IAEF,CAAC;;IAGD;AACJ;AACA;AACA;AACA;AACA;AACA;IACIlB,WAAW,CAAClD,SAAS,CAACqE,QAAQ,GAAG,YAAW;MAC1C,IAAIlB,IAAI,GAAG,IAAI;MAEfA,IAAI,CAACC,aAAa,GAAG,IAAI;;MAEzB;MACA;MACA;MACA;MACAnG,cAAc,CAACmB,OAAO,CAAC,UAASmF,MAAM,EAAE;QACtC,IAAI,WAAW,IAAI,OAAOJ,IAAI,CAACI,MAAM,CAAC,EAAE;UACtCJ,IAAI,CAACI,MAAM,CAAC,GAAGnE,EAAE,CAACG,KAAK,CAACgE,MAAM,CAAC;QACjC;MACF,CAAC,CAAC;;MAEF;MACAJ,IAAI,CAACmB,YAAY,GAAGnB,IAAI,CAACoB,wBAAwB,IAAI,CAAC,CAAC;;MAEvD;MACApB,IAAI,CAACqB,gBAAgB,GAAGrB,IAAI,CAACqB,gBAAgB,IAAI,CAAC,CAAC;MACnDrB,IAAI,CAACsB,UAAU,CAACrG,OAAO,CAAC,UAASsG,SAAS,EAAE;QAC1CvB,IAAI,CAACqB,gBAAgB,CAACE,SAAS,CAAC,GAAGvB,IAAI,CAACqB,gBAAgB,CAACE,SAAS,CAAC,IAAI,CAAC,CAAC;QACzEvB,IAAI,CAACqB,gBAAgB,CAACE,SAAS,CAAC,CAACJ,YAAY,GAAGnB,IAAI,CAACoB,wBAAwB,IAAI,CAAC,CAAC;MACrF,CAAC,CAAC;;MAEF;MACA,IAAIpB,IAAI,CAACoB,wBAAwB,IAAIhH,QAAQ,CAACF,QAAQ,KAAK,MAAM,IAAI8F,IAAI,CAACsB,UAAU,CAACzB,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,IAAIG,IAAI,CAACsB,UAAU,CAACzG,MAAM,GAAG,CAAC,EAAE;QAC5I,IAAI,OAAO2B,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,CAACgF,IAAI,KAAK,UAAU,EAAE;UACrEhF,OAAO,CAACgF,IAAI,CAAC,2GAA2G,CAAC;QAC3H;MACF;;MAEA;MACAxB,IAAI,CAACjE,GAAG,GAAGiE,IAAI,CAACjE,GAAG,GAAGiE,IAAI,CAACjE,GAAG,CAAC0F,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,GAAGjG,SAAS;;MAE/D;MACA;MACA,IAAI,OAAOwE,IAAI,CAAC0B,KAAK,KAAK,QAAQ,EAAE;QAClC;QACA;QACA1B,IAAI,CAAC0B,KAAK,GAAG1B,IAAI,CAAC0B,KAAK,CAACD,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;QAC1CzB,IAAI,CAAC0B,KAAK,IAAI,GAAG,GAAGtH,QAAQ,CAACG,aAAa;MAC5C,CAAC,MACI,IAAIyF,IAAI,CAAC0B,KAAK,IAAI,OAAO1B,IAAI,CAAC0B,KAAK,KAAK,QAAQ,EAAE;QACrD,MAAM,IAAIjG,KAAK,CAAC,kJAAkJ,CAAC;MACrK,CAAC,MACI,IAAI,CAACuE,IAAI,CAAC0B,KAAK,EAAE;QACpB1B,IAAI,CAAC0B,KAAK,GAAGtH,QAAQ,CAACG,aAAa;MACrC,CAAC,MACI;QACH,MAAM,IAAIkB,KAAK,CAAC,qDAAqD,GAACuE,IAAI,CAAC0B,KAAK,CAAC;MACnF;;MAEA;MACA;MACA;MACA;MACA,IAAIC,SAAS,GAAI,YAAW;QAE1B;QACA;QACA;QACA;QACA;QACA;QACA;QACA,IAAI,OAAOlH,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACmH,QAAQ,KAAK,WAAW,EAAE;UAC3E,OAAO,KAAK;QACd;;QAEA;QACA,IAAI,OAAO5B,IAAI,CAACjE,GAAG,KAAK,QAAQ,EAAE;UAAE,OAAO,KAAK;QAAE;;QAElD;QACA,IAAI8F,cAAc,GAAI,YAAW;UAC/B,IAAI;YACFA,cAAc,GAAG7B,IAAI,CAACjE,GAAG,CAAC+F,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;UACrE,CAAC,CACD,OAAOxG,CAAC,EAAE,CAAC;UACXsG,cAAc,GAAGA,cAAc,IAAI,SAAS;UAC5C,OAAOA,cAAc;QACvB,CAAC,EAAG;QACJ,IAAIG,WAAW,GAAG,CAAC,CAAChC,IAAI,CAACjE,GAAG,CAAC+F,KAAK,CAAC,QAAQ,CAAC;QAC5C,IAAIG,UAAU,GAAI,YAAW;UAC3B,IAAI;YACF,OAAOjC,IAAI,CAACjE,GAAG,CAAC+F,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC;UACzD,CAAC,CACD,OAAOvG,CAAC,EAAC,CAAC;UACV,OAAOyG,WAAW,GAAG,KAAK,GAAG,IAAI;QACnC,CAAC,EAAG;QACJ,IAAIE,mBAAmB,GAAGlC,IAAI,CAACjE,GAAG,CAAC0F,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC;;QAGjE;QACA;QACA,IAAII,cAAc,CAACJ,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,KAAKhH,MAAM,CAACmH,QAAQ,CAACO,QAAQ,CAACV,OAAO,CAAC,QAAQ,EAAC,EAAE,CAAC,EAAE;UAC1F,OAAO,IAAI;QACb;;QAGA;QACA,IAAIW,eAAe,GAAGF,mBAAmB,CAACG,MAAM,CAAC5H,MAAM,CAACmH,QAAQ,CAACU,QAAQ,CAAC,KAAK,CAAC;QAChF,IAAI,CAACF,eAAe,EAAE;UACpB,OAAO,IAAI;QACb;;QAEA;QACA;QACA,IAAIG,aAAa,GAAG9H,MAAM,CAACmH,QAAQ,CAACO,QAAQ,CAACL,KAAK,CAAC,QAAQ,CAAC;QAC5D,IAAIU,YAAY,GAAI/H,MAAM,CAACmH,QAAQ,CAACa,IAAI,GAAC,EAAE,KAAMF,aAAa,GAAG,KAAK,GAAG,IAAI,CAAC;;QAE9E;QACA,IAAIN,UAAU,KAAKO,YAAY,EAAE;UAC/B,OAAO,IAAI;QACb;;QAEA;QACA,OAAO,KAAK;MAEd,CAAC,EAAG;;MAGJ;MACA,CAAC,SAASE,YAAYA,CAAEzE,EAAE,EAAC;QAEzB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,IAAI,EAAE+B,IAAI,CAAC2C,uBAAuB,IAAIhB,SAAS,CAAC,EAAE;UAChD,OAAO1D,EAAE,EAAE;QACb;;QAEA;QACA;QACA,IAAI2E,gBAAgB,GAAG5C,IAAI,CAACjE,GAAG;QAC/B,IAAI,OAAOiE,IAAI,CAAC2C,uBAAuB,KAAK,QAAQ,EAAE;UACpDC,gBAAgB,IAAI5C,IAAI,CAAC2C,uBAAuB;QAClD,CAAC,MACI;UACHC,gBAAgB,IAAI,cAAc;QACpC;;QAEA;QACA7E,KAAK,CAAC;UACJhC,GAAG,EAAE6G,gBAAgB;UACrBrD,MAAM,EAAE;QACV,CAAC,EAAEtB,EAAE,CAAC;MAER,CAAC,EAAE,SAAS4E,yBAAyBA,CAAA,EAAG;QAEtC;QACA;QACA7C,IAAI,CAACX,IAAI,GAAGpD,EAAE,CAAC+D,IAAI,CAACjE,GAAG,EAAEiE,IAAI,CAAC;;QAE9B;QACA;QACA;QACAA,IAAI,CAACX,IAAI,CAACpD,EAAE,CAAC6G,MAAM,CAACvB,SAAS,CAACP,EAAE,CAAC,OAAO,EAAE,UAASC,GAAG,EAAC;UACrD,IAAI,CAACjB,IAAI,CAACC,aAAa,EAAE;YAAE;UAAQ;UAEnCD,IAAI,CAACC,aAAa,GAAG,KAAK;;UAE1B;UACA;UACAD,IAAI,CAAC+C,wBAAwB,GAAI,IAAIC,IAAI,EAAE,CAAEC,OAAO,EAAE;;UAEtD;UACA7F,QAAQ,CAAC,sCAAsC,CAAC;UAChDA,QAAQ,CAAC,mCAAmC,CAAC;UAC7CA,QAAQ,CAAC,mCAAmC,CAAC;UAC7CA,QAAQ,CAAC,sCAAsC,CAAC;UAChDA,QAAQ,CAAC,uCAAuC,CAAC;UACjDA,QAAQ,CAAC,qCAAqC,CAAC;UAC/CA,QAAQ,CAAC,yCAAyC,CAAC;UACnDA,QAAQ,CAAC,uDAAuD,CAAC;UACjEA,QAAQ,CAAC,cAAc,CAAC;UACxBA,QAAQ,CAAC,+CAA+C,CAAC;UACzDA,QAAQ,CAAC,uCAAuC,CAAC;UACjDA,QAAQ,CAAC,EAAE,CAAC;UACZA,QAAQ,CAAC,oBAAoB,CAAC;UAC9BA,QAAQ,CAAC6D,GAAG,CAAC;UACb7D,QAAQ,CAAC,sCAAsC,CAAC;QAClD,CAAC,CAAC;;QAEF;QACA4C,IAAI,CAACkD,MAAM,EAAE;;QAGb;AACR;AACA;AACA;QACQlD,IAAI,CAACgB,EAAE,CAAC,SAAS,EAAE,SAASmC,eAAeA,CAAA,EAAG;UAC5CnD,IAAI,CAACC,aAAa,GAAG,KAAK;UAC1B7C,QAAQ,CAACC,QAAQ,CACf,IAAI,GACJ,IAAI;UACJ;UACA;UACA;UACC,2BAA2B,IAAE2C,IAAI,CAACjE,GAAG,GAAGiE,IAAI,CAACjE,GAAG,GAAG,OAAO,CAAC,GAAC,GAAG,GAAG,IAAI,GACvE,+CAA+C,GAAG,IAAI,GACrD,6BAA6B,GAACE,EAAE,CAACG,KAAK,CAACgH,GAAG,CAAClJ,QAAQ,GAAC,SAAS,GAAC+B,EAAE,CAACG,KAAK,CAACgH,GAAG,CAACnJ,OAAO,GAAC,GAAG,GAAE,IAAI,GAC7F,yBAAyB,GAAE,IAAI+I,IAAI,EAAG,GAAC,IAAI,GAC3C,IAAI,GACJ,IAAI;UACJ;UACA;UACA;UACA;UACA;UAAA,CACD;QACH,CAAC,CAAC;;QAEFhD,IAAI,CAACgB,EAAE,CAAC,YAAY,EAAE,YAAW;UAE/B;UACAhB,IAAI,CAACqD,uBAAuB,GAAI,IAAIL,IAAI,EAAE,CAAEC,OAAO,EAAE;;UAErD;UACA,IAAIK,WAAW,GAAG,EAAE,CAACC,MAAM,CAACvD,IAAI,CAACL,YAAY,IAAI,EAAE,CAAC;UACpD;UACA;UACAK,IAAI,CAACL,YAAY,GAAG,EAAE;;UAEtB;UACA,IAAI6D,WAAW,GAAG,EAAE,CAACD,MAAM,CAACvD,IAAI,CAACF,YAAY,IAAI,EAAE,CAAC;UACpDE,IAAI,CAACF,YAAY,GAAG,EAAE;;UAEtB;UACA,IAAIwD,WAAW,CAACzI,MAAM,EAAE;YACtByI,WAAW,CAACrI,OAAO,CAAC,UAASwI,UAAU,EAAE;cACvCA,UAAU,CAAC,IAAIhI,KAAK,CAAC,uDAAuD,CAAC,EAAE;gBAC7EkD,IAAI,EAAE,IAAI;gBACVC,UAAU,EAAE,CAAC;gBACbhD,OAAO,EAAE,CAAC;cACZ,CAAC,CAAC;YACJ,CAAC,CAAC;UACJ;;UAEA;UACA;UACA;UACA,IAAI4H,WAAW,CAAC3I,MAAM,EAAE;YACtB2I,WAAW,CAACvI,OAAO,CAAC,UAASmE,UAAU,EAAE;cACvCA,UAAU,CAACM,QAAQ,GAAG,IAAI;YAC5B,CAAC,CAAC;UACJ;UAEAtC,QAAQ,CAAC,sCAAsC,CAAC;UAChDA,QAAQ,CAAC,qCAAqC,CAAC;UAC/CA,QAAQ,CAAC,uDAAuD,GAAG,IAAI,GACrE,iBAAiB,IAAI4C,IAAI,CAACjE,GAAG,GAAGiE,IAAI,CAACjE,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,gBAAgB,GAAG,IAAI,GAC9E,6CAA6C,CAAC;UAChDqB,QAAQ,CAAC,sCAAsC,CAAC;QAClD,CAAC,CAAC;QAEF4C,IAAI,CAACgB,EAAE,CAAC,cAAc,EAAE,UAAS0C,WAAW,EAAE;UAC5CtG,QAAQ,CACN,IAAI,GACJ,2CAA2C,IAAE4C,IAAI,CAACjE,GAAG,GAAGiE,IAAI,CAACjE,GAAG,GAAG,OAAO,CAAC,GAAC,OAAO,GACnF,oBAAoB,GAAG2H,WAAW,GAAG,GAAG,GAAC,IAAI,GAC7C,IAAI,CACL;QACH,CAAC,CAAC;QAEF1D,IAAI,CAACgB,EAAE,CAAC,WAAW,EAAE,UAASO,SAAS,EAAEmC,WAAW,EAAE;UACpD,IAAI,CAAC1D,IAAI,CAACC,aAAa,EAAE;YACvBD,IAAI,CAACgB,EAAE,CAAC,SAAS,EAAE1D,eAAe,CAACZ,IAAI,CAACsD,IAAI,EAAEA,IAAI,CAAC,CAAC;UACtD;UAEA,IAAI2D,kBAAkB;UACtB,IAAIC,cAAc;UAClB,IAAI5D,IAAI,CAACqD,uBAAuB,EAAC;YAC/BM,kBAAkB,GAAK,IAAIX,IAAI,EAAE,CAAEC,OAAO,EAAE,GAAGjD,IAAI,CAACqD,uBAAwB;YAC5EO,cAAc,GAAID,kBAAkB,GAAG,IAAK;UAC9C,CAAC,MACI,IAAI3D,IAAI,CAAC+C,wBAAwB,EAAE;YACtCY,kBAAkB,GAAK,IAAIX,IAAI,EAAE,CAAEC,OAAO,EAAE,GAAGjD,IAAI,CAAC+C,wBAAyB;YAC7Ea,cAAc,GAAID,kBAAkB,GAAG,IAAK;UAC9C,CAAC,MACI;YACHA,kBAAkB,GAAG,KAAK;YAC1BC,cAAc,GAAG,KAAK;UACxB;UAEAxG,QAAQ,CACN,IAAI,GACH,+CAA+C,GAAC,IAAI,GACrD,kCAAkC,GAAGwG,cAAc,GAAG,WAAW,GAAC,IAAI,GACtE,IAAI,CACL;QACH,CAAC,CAAC;;QAEF;QACA;QACA;QACA5D,IAAI,CAACgB,EAAE,CAAC,OAAO,EAAE,SAAS6C,eAAeA,CAAC5C,GAAG,EAAE;UAC7CjB,IAAI,CAACC,aAAa,GAAG,KAAK;UAC1B;UACA;UACA;UACA;UACA;UACA;;UAEA7C,QAAQ,CACN,6EAA6E,EAC7E,QAAQ,EAAE6D,GAAG,CACd;QACH,CAAC,CAAC;MACJ,CAAC,CAAC;IAEJ,CAAC;;IAED;AACJ;AACA;AACA;AACA;IACIlB,WAAW,CAAClD,SAAS,CAACiH,SAAS,GAAG,YAAW;MAC3C,IAAI,IAAI,CAAC7D,aAAa,EAAE;QACtB,MAAM,IAAIxE,KAAK,CAAC,8CAA8C,CAAC;MACjE;MACA,IAAI,IAAI,CAACkF,WAAW,EAAE,EAAE;QACtB,MAAM,IAAIlF,KAAK,CAAC,6CAA6C,CAAC;MAChE;MACA,OAAO,IAAI,CAACyF,QAAQ,EAAE;IACxB,CAAC;;IAED;AACJ;AACA;AACA;AACA;IACInB,WAAW,CAAClD,SAAS,CAACkH,UAAU,GAAG,YAAW;MAC5C,IAAI,CAAC9D,aAAa,GAAG,KAAK;MAC1B,IAAI,CAAC,IAAI,CAACU,WAAW,EAAE,EAAE;QACvB,MAAM,IAAIlF,KAAK,CAAC,mDAAmD,CAAC;MACtE;MACA,OAAO,IAAI,CAAC4D,IAAI,CAAC0E,UAAU,EAAE;IAC/B,CAAC;;IAID;AACJ;AACA;AACA;AACA;AACA;;IAEIhE,WAAW,CAAClD,SAAS,CAAC8D,WAAW,GAAG,YAAY;MAC9C,IAAI,CAAC,IAAI,CAACtB,IAAI,EAAE;QACd,OAAO,KAAK;MACd;MAEA,OAAO,CAAC,CAAC,IAAI,CAACA,IAAI,CAAC2E,SAAS;IAC9B,CAAC;;IAGD;AACJ;AACA;AACA;AACA;AACA;;IAEIjE,WAAW,CAAClD,SAAS,CAACoH,YAAY,GAAG,YAAY;MAC/C,OAAO,IAAI,CAAChE,aAAa;IAC3B,CAAC;;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACIF,WAAW,CAAClD,SAAS,CAACqH,yBAAyB,GAAG,YAAW;MAC3D,OAAO,IAAI,CAAChE,0BAA0B;IACxC,CAAC;;IAED;AACJ;AACA;AACA;IACIH,WAAW,CAAClD,SAAS,CAACqG,MAAM,GAAG,YAAW;MACxC,IAAIlD,IAAI,GAAG,IAAI;;MAEf;MACA;MACA,KAAK,IAAImE,MAAM,IAAInE,IAAI,CAACe,UAAU,EAAE;QAClC,KAAK,IAAIrD,CAAC,IAAIsC,IAAI,CAACe,UAAU,CAACoD,MAAM,CAAC,EAAE;UACrCnE,IAAI,CAACX,IAAI,CAAC2B,EAAE,CAACmD,MAAM,EAAEnE,IAAI,CAACe,UAAU,CAACoD,MAAM,CAAC,CAACzG,CAAC,CAAC,CAAC;QAClD;MACF;;MAEA;MACA;MACA,IAAK,CAACsC,IAAI,CAACW,WAAW,EAAE,EAAG;QACzBX,IAAI,CAACX,IAAI,CAAC+E,IAAI,CAAC,SAAS,EAAE9G,eAAe,CAACZ,IAAI,CAACsD,IAAI,EAAEA,IAAI,CAAC,CAAC;MAC7D;MACA;MAAA,KACK;QACH1C,eAAe,CAAC0C,IAAI,CAAC;MACvB;MAEA,OAAOA,IAAI;IACb,CAAC;;IAGD;AACJ;AACA;AACA;AACA;AACA;AACA;IACID,WAAW,CAAClD,SAAS,CAACmE,EAAE,GAAG,UAAUmD,MAAM,EAAEE,EAAE,EAAC;MAE9C;MACA,IAAI,IAAI,CAAChF,IAAI,EAAE;QACb,IAAI,CAACA,IAAI,CAAC2B,EAAE,CAACmD,MAAM,EAAEE,EAAE,CAAC;QACxB,OAAO,IAAI;MACb;;MAEA;MACA,IAAI,CAAC,IAAI,CAACtD,UAAU,CAACoD,MAAM,CAAC,EAAE;QAC5B,IAAI,CAACpD,UAAU,CAACoD,MAAM,CAAC,GAAG,CAACE,EAAE,CAAC;MAChC,CAAC,MACI;QACH,IAAI,CAACtD,UAAU,CAACoD,MAAM,CAAC,CAACG,IAAI,CAACD,EAAE,CAAC;MAClC;MAEA,OAAO,IAAI;IACb,CAAC;;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;IACItE,WAAW,CAAClD,SAAS,CAAC0H,GAAG,GAAG,UAAUJ,MAAM,EAAEE,EAAE,EAAC;MAE/C;MACA,IAAI,IAAI,CAAChF,IAAI,EAAE;QACb,IAAI,CAACA,IAAI,CAACkF,GAAG,CAACJ,MAAM,EAAEE,EAAE,CAAC;QACzB,OAAO,IAAI;MACb;;MAEA;MACA,IAAI,IAAI,CAACtD,UAAU,CAACoD,MAAM,CAAC,IAAI,IAAI,CAACpD,UAAU,CAACoD,MAAM,CAAC,CAACtE,OAAO,CAACwE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;QACvE,IAAI,CAACtD,UAAU,CAACoD,MAAM,CAAC,CAACvE,MAAM,CAAC,IAAI,CAACmB,UAAU,CAACoD,MAAM,CAAC,CAACtE,OAAO,CAACwE,EAAE,CAAC,EAAE,CAAC,CAAC;MACxE;MAEA,OAAO,IAAI;IACb,CAAC;;IAGD;AACJ;AACA;AACA;AACA;IACItE,WAAW,CAAClD,SAAS,CAAC2H,kBAAkB,GAAG,YAAW;MAEpD;MACA,IAAI,IAAI,CAACnF,IAAI,EAAE;QACb,IAAI,CAACA,IAAI,CAACmF,kBAAkB,EAAE;QAC9B,OAAO,IAAI;MACb;;MAEA;MACA,IAAI,CAACzD,UAAU,GAAG,CAAC,CAAC;MAEpB,OAAO,IAAI;IACb,CAAC;;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEIhB,WAAW,CAAClD,SAAS,CAAC0D,GAAG,GAAG,UAASxE,GAAG,EAAE0I,IAAI,EAAExG,EAAE,EAAE;MAElD;MACA,IAAI,OAAOwG,IAAI,KAAK,UAAU,EAAE;QAC9BxG,EAAE,GAAGwG,IAAI;QACTA,IAAI,GAAG,CAAC,CAAC;MACX;MAEA,OAAO,IAAI,CAAC3G,OAAO,CAAC;QAClByB,MAAM,EAAE,KAAK;QACbmF,MAAM,EAAED,IAAI;QACZ1I,GAAG,EAAEA;MACP,CAAC,EAAEkC,EAAE,CAAC;IACR,CAAC;;IAID;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEI8B,WAAW,CAAClD,SAAS,CAAC8H,IAAI,GAAG,UAAS5I,GAAG,EAAE0I,IAAI,EAAExG,EAAE,EAAE;MAEnD;MACA,IAAI,OAAOwG,IAAI,KAAK,UAAU,EAAE;QAC9BxG,EAAE,GAAGwG,IAAI;QACTA,IAAI,GAAG,CAAC,CAAC;MACX;MAEA,OAAO,IAAI,CAAC3G,OAAO,CAAC;QAClByB,MAAM,EAAE,MAAM;QACdkF,IAAI,EAAEA,IAAI;QACV1I,GAAG,EAAEA;MACP,CAAC,EAAEkC,EAAE,CAAC;IACR,CAAC;;IAID;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEI8B,WAAW,CAAClD,SAAS,CAAC+H,GAAG,GAAG,UAAS7I,GAAG,EAAE0I,IAAI,EAAExG,EAAE,EAAE;MAElD;MACA,IAAI,OAAOwG,IAAI,KAAK,UAAU,EAAE;QAC9BxG,EAAE,GAAGwG,IAAI;QACTA,IAAI,GAAG,CAAC,CAAC;MACX;MAEA,OAAO,IAAI,CAAC3G,OAAO,CAAC;QAClByB,MAAM,EAAE,KAAK;QACbmF,MAAM,EAAED,IAAI;QACZ1I,GAAG,EAAEA;MACP,CAAC,EAAEkC,EAAE,CAAC;IACR,CAAC;;IAGD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEI8B,WAAW,CAAClD,SAAS,CAACgI,KAAK,GAAG,UAAS9I,GAAG,EAAE0I,IAAI,EAAExG,EAAE,EAAE;MAEpD;MACA,IAAI,OAAOwG,IAAI,KAAK,UAAU,EAAE;QAC9BxG,EAAE,GAAGwG,IAAI;QACTA,IAAI,GAAG,CAAC,CAAC;MACX;MAEA,OAAO,IAAI,CAAC3G,OAAO,CAAC;QAClByB,MAAM,EAAE,OAAO;QACfmF,MAAM,EAAED,IAAI;QACZ1I,GAAG,EAAEA;MACP,CAAC,EAAEkC,EAAE,CAAC;IACR,CAAC;;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEI8B,WAAW,CAAClD,SAAS,CAAC,QAAQ,CAAC,GAAG,UAASd,GAAG,EAAE0I,IAAI,EAAExG,EAAE,EAAE;MAExD;MACA,IAAI,OAAOwG,IAAI,KAAK,UAAU,EAAE;QAC9BxG,EAAE,GAAGwG,IAAI;QACTA,IAAI,GAAG,CAAC,CAAC;MACX;MAEA,OAAO,IAAI,CAAC3G,OAAO,CAAC;QAClByB,MAAM,EAAE,QAAQ;QAChBmF,MAAM,EAAED,IAAI;QACZ1I,GAAG,EAAEA;MACP,CAAC,EAAEkC,EAAE,CAAC;IACR,CAAC;;IAID;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEI8B,WAAW,CAAClD,SAAS,CAACiB,OAAO,GAAG,UAASxB,OAAO,EAAE2B,EAAE,EAAE;MAEpD,IAAI6G,KAAK,GACT,UAAU,GACV,uDAAuD,GACvD,gCAAgC,GAAC,IAAI,GACrC,gEAAgE,GAAC,IAAI,GACrE,6DAA6D,GAAC,IAAI,GAClE,iEAAiE;MACjE;MACA;MACA;;MAGA;MACA,IAAI,OAAO7G,EAAE,KAAK,WAAW,IAAI,OAAOA,EAAE,KAAK,UAAU,EAAE;QACzD,MAAM,IAAIxC,KAAK,CAAC,8BAA8B,GAAGqJ,KAAK,CAAC;MACzD;MACA,IAAI,OAAOxI,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,CAACP,GAAG,KAAK,QAAQ,EAAE;QAClE,MAAM,IAAIN,KAAK,CAAC,2BAA2B,GAAGqJ,KAAK,CAAC;MACtD;MACA,IAAIxI,OAAO,CAACiD,MAAM,IAAI,OAAOjD,OAAO,CAACiD,MAAM,KAAK,QAAQ,EAAE;QACxD,MAAM,IAAI9D,KAAK,CAAC,uEAAuE,GAAGqJ,KAAK,CAAC;MAClG;MACA,IAAIxI,OAAO,CAACV,OAAO,IAAI,OAAOU,OAAO,CAACV,OAAO,KAAK,QAAQ,EAAE;QAC1D,MAAM,IAAIH,KAAK,CAAC,0EAA0E,GAAGqJ,KAAK,CAAC;MACrG;MACA,IAAIxI,OAAO,CAACoI,MAAM,IAAI,OAAOpI,OAAO,CAACoI,MAAM,KAAK,QAAQ,EAAE;QACxD,MAAM,IAAIjJ,KAAK,CAAC,oFAAoF,GAAGqJ,KAAK,CAAC;MAC/G;MACA,IAAIxI,OAAO,CAACmI,IAAI,IAAI,OAAOnI,OAAO,CAACmI,IAAI,KAAK,QAAQ,EAAE;QACpD,MAAM,IAAIhJ,KAAK,CAAC,kFAAkF,GAAGqJ,KAAK,CAAC;MAC7G;;MAEA;MACA,IAAIxI,OAAO,CAACmI,IAAI,IAAInI,OAAO,CAACoI,MAAM,EAAE;QAClC,MAAM,IAAIjJ,KAAK,CAAC,6EAA6E,GAAGqJ,KAAK,CAAC;MACxG,CAAC,MACI,IAAIxI,OAAO,CAACmI,IAAI,EAAE;QACrBnI,OAAO,CAACoI,MAAM,GAAGpI,OAAO,CAACmI,IAAI;QAC7B,OAAOnI,OAAO,CAACmI,IAAI;MACrB;;MAGA;MACA;MACA;MACA,IAAK,CAAE,IAAI,CAAC9D,WAAW,EAAE,EAAG;QAE1B;QACA,IAAI,CAAClD,YAAY,GAAG,IAAI,CAACA,YAAY,IAAI,EAAE;QAC3C,IAAI,CAACA,YAAY,CAAC6G,IAAI,CAAC,CAAChI,OAAO,EAAE2B,EAAE,CAAC,CAAC;QACrC;MACF;;MAEA;MACA;;MAEA;MACA3B,OAAO,CAACV,OAAO,GAAGU,OAAO,CAACV,OAAO,IAAI,CAAC,CAAC;;MAEvC;MACA;MACA,IAAIwD,UAAU,GAAG;QAEfG,MAAM,EAAE,CAACjD,OAAO,CAACiD,MAAM,IAAI,KAAK,EAAEwC,WAAW,EAAE;QAE/CnG,OAAO,EAAEU,OAAO,CAACV,OAAO;QAExB6I,IAAI,EAAEnI,OAAO,CAACoI,MAAM,IAAIpI,OAAO,CAACmI,IAAI,IAAI,CAAC,CAAC;QAE1C;QACA1I,GAAG,EAAEO,OAAO,CAACP,GAAG,CAAC0F,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;QAE9CxD,EAAE,EAAEA;MACN,CAAC;;MAED;MACA,IAAI,CAAC0B,YAAY,GAAG,IAAI,CAACA,YAAY,IAAI,EAAE;;MAE3C;MACA,IAAI,CAACG,YAAY,GAAG,IAAI,CAACA,YAAY,IAAI,EAAE;;MAE3C;MACA;MACA;MACA;MACA;MACA,IAAI7B,EAAE,EAAE;QACN,IAAI,CAAC0B,YAAY,CAAC2E,IAAI,CAACrG,EAAE,CAAC;QAC1B,IAAI,CAAC6B,YAAY,CAACwE,IAAI,CAAClF,UAAU,CAAC;MACpC;;MAEA;MACA,IAAI,IAAI,CAACxD,OAAO,IAAI,QAAQ,KAAK,OAAO,IAAI,CAACA,OAAO,EAAE;QACpD,KAAK,IAAImJ,MAAM,IAAI,IAAI,CAACnJ,OAAO,EAAE;UAC/B,IAAI,CAACU,OAAO,CAACV,OAAO,CAACgC,cAAc,CAACmH,MAAM,CAAC,EAAE;YAC3CzI,OAAO,CAACV,OAAO,CAACmJ,MAAM,CAAC,GAAG,IAAI,CAACnJ,OAAO,CAACmJ,MAAM,CAAC;UAChD;QACF;MACF;;MAEA;MACA5F,SAAS,CAAC,IAAI,EAAEC,UAAU,CAAC;IAC7B,CAAC;;IAID;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIW,WAAW,CAAClD,SAAS,CAACmI,QAAQ,GAAG,UAAS1I,OAAO,EAAE2B,EAAE,EAAE;MACrD,MAAM,IAAIxC,KAAK,CAAC,4GAA4G,CAAC;IAC/H,CAAC;;IAQD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAGA;IACA;IACA;IACAQ,EAAE,CAACG,KAAK,GAAG;MAET;MACAV,WAAW,EAAE,IAAI;MAEjB;MACAuJ,YAAY,EAAE,KAAK;MAEnB;MACA;MACAtC,uBAAuB,EAAE,IAAI;MAE7B;MACA;MACA;MACA;MACA;MACA;MACA;MACAhH,WAAW,EACTb,2BAA2B,CAACgH,KAAK,CAAC,2BAA2B,CAAC,IAE5D,OAAOrH,MAAM,KAAK,QAAQ,IAAIA,MAAM,IACpC,OAAOA,MAAM,CAACyK,YAAY,KAAK,QAAQ,IAAIzK,MAAM,CAACyK,YAAY,KAC7DzK,MAAM,CAACyK,YAAY,CAACC,YAAY,KAAK,SAAS,IAAI1K,MAAM,CAACyK,YAAY,CAACC,YAAY,KAAK,YAAY,CACrG,GACA,YAAY,GAAG,aAAa;MAE/B;MACA/B,GAAG,EAAEhJ,QAAQ;MAEb;MACAkH,UAAU,EAAE,CAAC,WAAW;IAC1B,CAAC;;IAID;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAvH,0BAA0B,CAACkB,OAAO,CAAC,UAAUC,SAAS,EAAC;MACrD,IAAI,OAAOH,eAAe,CAACG,SAAS,CAAC,KAAK,WAAW,EAAE;QACrDe,EAAE,CAACG,KAAK,CAAClB,SAAS,CAAC,GAAGH,eAAe,CAACG,SAAS,CAAC;MAClD;IACF,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;;IAKA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIe,EAAE,CAACG,KAAK,CAACgJ,OAAO,GAAG,UAASrJ,GAAG,EAAEiC,IAAI,EAAE;MAErC;MACA,IAAI,QAAQ,KAAK,OAAOjC,GAAG,EAAE;QAC3BiC,IAAI,GAAGjC,GAAG;QACVA,GAAG,GAAG,IAAI;MACZ;;MAEA;MACAiC,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;;MAEjB;MACAA,IAAI,CAACjC,GAAG,GAAGA,GAAG,IAAIiC,IAAI,CAACjC,GAAG,IAAIP,SAAS;;MAEvC;MACA,IAAI+B,MAAM,GAAG,IAAIwC,WAAW,CAAC/B,IAAI,CAAC;MAClCT,MAAM,CAAC2D,QAAQ,EAAE;MACjB,OAAO3D,MAAM;IACf,CAAC;;IAOD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAGA;IACA;IACAtB,EAAE,CAACsB,MAAM,GAAG,IAAIwC,WAAW,EAAE;IAC7B;IACA;IACA;IACA;IACA;IACA;;IAGA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA9D,EAAE,CAACsB,MAAM,CAAC2C,0BAA0B,GAAG,IAAI;IAE3CmF,UAAU,CAAC,YAAW;MAEpB;MACApJ,EAAE,CAACsB,MAAM,CAAC2C,0BAA0B,GAAG,KAAK;;MAE5C;MACA,IAAIjE,EAAE,CAACG,KAAK,CAACV,WAAW,KAAK,KAAK,IAAIO,EAAE,CAACG,KAAK,CAACkJ,WAAW,KAAK,KAAK,EAAE;QACpE,OAAOrJ,EAAE,CAACsB,MAAM;QAChB;MACF;;MAEA;MACAtB,EAAE,CAACsB,MAAM,CAAC2D,QAAQ,EAAE;IAGtB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;IAGP;IACA,OAAOjF,EAAE;EACX,CAAC,CAAC;;EAEF;EACA;EACA;EACA;;EAKA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA,IAAI7B,QAAQ,CAACF,QAAQ,KAAK,MAAM,EAAE;IAChCG,MAAM,CAACC,OAAO,GAAG4B,aAAa;EAChC;EACA;EAAA,KACK,IAAI,OAAOqJ,MAAM,KAAK,UAAU,IAAIA,MAAM,CAACC,GAAG,EAAE;IACnDD,MAAM,CAAC,EAAE,EAAE,YAAW;MACpB,OAAOrJ,aAAa;IACtB,CAAC,CAAC;EACJ,CAAC,MACI;IACH;IACAA,aAAa,EAAE;;IAEf;IACA;IACA;IACA;EACF;AAEF,CAAC,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}